# -*- coding: utf-8 -*-
from flask import Flask, request, jsonify
from langchain.vectorstores import Chroma
from langchain.embeddings import OpenAIEmbeddings
from langchain.chat_models import ChatOpenAI
from langchain.chains import RetrievalQA
import os
from dotenv import load_dotenv
load_dotenv()
import sqlite3
import stripe
import requests
import zipfile
import json
import re
import traceback
import random

app = Flask(__name__)

# GASへの決済成功通知関数
def notify_gas_payment_success(user_id):
    GAS_URL = os.getenv("GAS_NOTIFY_URL")
    if not GAS_URL:
        print("⚠️ GAS_NOTIFY_URLが設定されていません。通知をスキップします。")
        return
    
    try:
        res = requests.post(GAS_URL, json={"userId": user_id, "paid": True})
        print("✅ GAS通知送信済み:", res.status_code, res.text)
    except Exception as e:
        print("❌ GAS通知エラー:", str(e))

# GASへの詳細アドバイス送信関数
def send_detailed_advice_to_gas(user_id, mbti):
    GAS_URL = os.getenv("GAS_NOTIFY_URL")
    if not GAS_URL:
        print("⚠️ GAS_NOTIFY_URLが設定されていません。詳細アドバイス送信をスキップします。")
        return
    
    try:
        res = requests.post(GAS_URL, json={
            "action": "send_detailed_advice",
            "userId": user_id,
            "mbti": mbti
        })
        print("✅ 詳細アドバイス送信済み:", res.status_code, res.text)
    except Exception as e:
        print("❌ 詳細アドバイス送信エラー:", str(e))

# GASへのチャットメッセージ送信関数
def send_chat_message_to_gas(user_id, mbti):
    GAS_URL = os.getenv("GAS_NOTIFY_URL")
    if not GAS_URL:
        print("⚠️ GAS_NOTIFY_URLが設定されていません。チャットメッセージ送信をスキップします。")
        return
    
    try:
        res = requests.post(GAS_URL, json={
            "action": "send_chat_message",
            "userId": user_id,
            "mbti": mbti
        })
        print("✅ チャットメッセージ送信済み:", res.status_code, res.text)
    except Exception as e:
        print("❌ チャットメッセージ送信エラー:", str(e))

# 🔐 OpenAI・Stripe・LINE設定
openai_api_key = os.getenv("OPENAI_API_KEY")
stripe.api_key = os.getenv("STRIPE_SECRET_KEY")
stripe_price_id = os.getenv("STRIPE_PRICE_ID")
stripe_webhook_secret = os.getenv("STRIPE_WEBHOOK_SECRET")

# 💾 データベースパス設定（環境に応じて切り替え）
DB_PATH = os.getenv("DB_PATH", "/data/user_data.db")  # 本番環境では永続ディスクを使用

# 🧳 chroma_db.zip を展開（初回起動時）
if not os.path.exists("./chroma_db") and os.path.exists("./chroma_db.zip"):
    print("chroma_db.zipを展開中...")
    with zipfile.ZipFile("./chroma_db.zip", 'r') as zip_ref:
        zip_ref.extractall("./")
    print("chroma_db.zipの展開が完了しました。")

# 📖 MBTIアドバイス読み込み
if not os.path.exists("mbti_advice.json"):
    print("エラー: mbti_advice.jsonが見つかりません。")
    mbti_detailed_advice = {}
else:
    with open("mbti_advice.json", "r", encoding="utf-8") as f:
        mbti_detailed_advice = json.load(f)
    print("mbti_advice.jsonを読み込みました。")

# MBTIニックネームの定義
MBTI_NICKNAME = {
    "INTJ": "静かなる愛の地雷処理班",
    "INTP": "こじらせ知能型ラブロボ",
    "ENTJ": "恋も主導権ガチ勢",
    "ENTP": "恋のジェットコースター",
    "INFJ": "重ためラブポエマー📜",
    "INFP": "愛されたいモンスター🧸",
    "ENFJ": "ご奉仕マネージャー📋",
    "ENFP": "かまってフェニックス🔥",
    "ISTJ": "恋愛ルールブック📘",
    "ISFJ": "感情しみしみおでん🍢",
    "ESTJ": "正論ぶん回し侍⚔️",
    "ESFJ": "愛の押し売り百貨店🛍️",
    "ISTP": "甘え方わからん星人🪐",
    "ISFP": "ぬくもり中毒者🔥",
    "ESTP": "勢い重視族📶",
    "ESFP": "ハイテン・ラブ・ジェット🚀"
}

# MBTI別の詳細な性格特徴と恋愛傾向
MBTI_PERSONALITY = {
    "INTJ": {
        "traits": ["合理的", "計画的", "独立心", "一人の時間が好き", "高い基準", "率直", "知的好奇心"],
        "love_style": "効率と合理性を重視し、駆け引きよりも誠実な関係を求める。一度好きになると一途で真剣。",
        "strengths": ["計画性", "効率性", "自立心", "論理的", "誠実"],
        "challenges": ["感情表現が苦手", "柔軟性の欠如", "高い期待を持ちやすい"],
        "advice_style": "論理的で誠実なアドバイス",
        "likes_in_partner": ["知的好奇心", "自立心", "計画性", "誠実さ", "論理的思考"],
        "dislikes_in_partner": ["感情的すぎる", "非論理的", "依存的", "計画性がない"],
        "common_concerns": ["感情表現が苦手", "柔軟性が足りない", "高い理想を求めすぎる"],
        "my_approaches": ["率直に気持ちを伝える", "計画的にデートを提案する", "知的な話題を共有する"],
        "partner_approaches": ["相手の一人時間を尊重する", "論理的な会話を心がける", "計画的なデートを提案する"],
        "ng_behaviors": ["感情的な爆発", "非論理的な行動", "依存的な態度"],
        "partner_ng_behaviors": ["一人の時間を奪う", "論理を無視する", "感情的に責める"],
        "favorite_dates": ["美術館や博物館", "静かなカフェ", "知的なイベント", "計画的なアウトドア"],
        "line_tendencies": ["論理的なやりとり", "長文になりがち", "スタンプ少なめ", "深い話題を好む"],
        "line_examples": [
            "今日はどんな本を読んでた？おすすめがあれば教えて！",
            "今度、静かなカフェでゆっくり話さない？",
            "新しい展示会があるんだけど、一緒に行かない？",
            "この問題について、あなたの意見も聞きたいな",
            "将来のことについて一緒に考えてみない？"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: 新しい本を読んでたんだけど、あなたにもおすすめしたい。一緒に読んで感想を話し合わない？",
            "相手: 週末何か予定ある？\nあなた: 静かなカフェでゆっくり話したいんだけど、一緒に行かない？",
            "相手: 最近何か新しい発見はある？\nあなた: この問題について考えてたんだけど、あなたの意見も聞きたいな"
        ],
        "romantic_signs": [
            "将来の話にあなたを含める",
            "一人の時間を削って会おうとする",
            "知的な話題を共有したがる",
            "計画的なデートを提案する",
            "論理的な会話を好む"
        ],
        "date_invitations": [
            "今度、美術館に一緒に行かない？",
            "静かなカフェでゆっくり話そう。",
            "新しい展示会があるんだけど一緒にどう？",
            "今度、星空を見に行かない？",
            "面白いイベントがあるから一緒に行こう！"
        ],
        "confession_examples": [
            "あなたのことをずっと考えていました。好きです。",
            "一緒にいると安心します。付き合ってほしいです。",
            "君となら将来のことも考えられる。好きです。",
            "理屈抜きで君が好きです。",
            "これからも一緒に成長していきたいです。付き合ってください。"
        ],
        "relationship_strengths": [
            "計画性があり、効率的で安定した関係を築くことができる",
            "論理的思考で問題を冷静に分析し、解決策を提案できる",
            "独立心があり、相手の個性を尊重できる",
            "誠実で一途な愛情を提供できる",
            "知的好奇心が強く、常に新しい学びを共有できる"
        ],
        "relationship_challenges": [
            "感情表現が苦手で、相手に気持ちが伝わりにくい",
            "柔軟性が欠如し、相手の感情的な要求に対応しにくい",
            "高い期待を持ちすぎて、相手を追い詰めてしまう",
            "一人の時間を重視しすぎて、相手を置いてけぼりにする",
            "論理的すぎて、相手の感情を理解しにくい"
        ],
        "relationship_hurdles": [
            "感情的なコミュニケーションの不足",
            "柔軟性の欠如による関係の硬直化",
            "高い期待による相手へのプレッシャー",
            "一人時間と関係のバランス",
            "論理的思考と感情のバランス"
        ],
        "line_message_templates": [
            "「今日はどんな本を読んでた？おすすめがあれば教えて！特に〇〇について興味があるんだけど。」",
            "「今度、静かなカフェでゆっくり話さない？〇〇について一緒に考えてみたいな。」",
            "「新しい展示会があるんだけど、一緒に行かない？〇〇の分野で興味深いものがあるんだ。」",
            "「この問題について、あなたの意見も聞きたい。〇〇の観点からどう思う？」",
            "「将来のことについて一緒に考えてみない？〇〇についても話してみたいな。」"
        ],
        "confession_timing": "INTJは、お互いの価値観や将来のビジョンが一致し、論理的な理由で関係を深められると感じたタイミングで告白されることを好みます。感情的な告白よりも、冷静で誠実な態度での告白が理想的です。",
        "key_points_for_confession": [
            "論理的な理由と共に気持ちを伝える",
            "将来のビジョンについて言及する",
            "相手の個性を尊重していることを伝える",
            "冷静で誠実な態度を保つ",
            "相手の反応を尊重し、時間を与える"
        ],
        "ng_points_for_confession": [
            "感情的な過剰表現",
            "相手の個性を無視した告白",
            "論理的な根拠のない告白",
            "相手の一人時間を奪う告白",
            "急いで結論を求める告白"
        ],
        "preferred_date_plans": [
            "美術館や博物館での知的な探求",
            "静かなカフェでの深い会話",
            "知的なイベントへの参加",
            "計画的なアウトドア活動",
            "一人時間を尊重できる場所でのデート"
        ],
        "effective_approach_methods": [
            "知的な話題で相手の好奇心を刺激する",
            "相手の独立心を尊重し、自由な関係を築く",
            "計画的なアプローチで関係を発展させる",
            "論理的な会話を通じて深い理解を深める",
            "相手の個性を理解し、効率的に対応する"
        ],
        "disliked_ng_behaviors": [
            "感情的な爆発",
            "非論理的な行動",
            "依存的な態度",
            "一人の時間を奪う行動",
            "論理を無視する態度"
        ],
        "disliked_people_characteristics": [
            "感情的すぎる人",
            "非論理的な人",
            "依存的な人",
            "計画性がない人",
            "誠実でない人"
        ],
        "how_to_close_distance": [
            "知的な交流を通じて信頼関係を築く",
            "相手の独立心を尊重し、適度な距離を保つ",
            "計画的なアプローチで関係を発展させる",
            "論理的な会話でお互いの理解を深める",
            "相手の個性を理解し、効率的に対応する"
        ],
        "desired_partner_traits": [
            "知的好奇心が強い人",
            "自立心のある人",
            "計画性のある人",
            "誠実な人",
            "論理的思考ができる人"
        ],
        "keys_to_successful_relationships": [
            "お互いの知的好奇心を刺激し合う",
            "独立心を尊重し、自由な関係を築く",
            "計画的なアプローチで関係を発展させる",
            "論理的な会話で深い理解を深める",
            "相手の個性を理解し、効率的に対応する"
        ],
        "points_to_watch_out_for": [
            "感情的なコミュニケーションの不足",
            "柔軟性の欠如による関係の硬直化",
            "高い期待による相手へのプレッシャー",
            "一人時間と関係のバランス",
            "論理的思考と感情のバランス"
        ]
    },
    "INTP": {
        "traits": ["論理的思考", "創造性", "一人の時間が好き", "好奇心", "分析力", "柔軟", "独立心"],
        "love_style": "知的な探求と自由な関係を求める恋愛スタイル。論理的に考えて、創造的なアプローチで関係を築くことを重視する。一人の時間を大切にして、お互いの個性を尊重し合う関係を大切にする。好奇心が強くて、新しい発見を共有する関係を心がける。",
        "strengths": ["論理的思考", "創造性", "分析力", "独立心", "好奇心"],
        "challenges": ["気持ちの表現", "長期的な関係", "相手の気持ちを理解", "実践的な行動"],
        "advice_style": "論理的で創造的なアドバイス",
        "likes_in_partner": ["知的好奇心", "独立心", "創造性", "論理的思考", "柔軟", "個性"],
        "dislikes_in_partner": ["知的好奇心がない", "依存心が強い", "創造的でない", "非論理的", "柔軟でない"],
        "common_concerns": ["気持ちを表現するのが苦手", "長期的な関係が苦手", "実践的な行動が苦手"],
        "my_approaches": ["論理的なアプローチをする", "創造的な関係を築く", "好奇心を共有する"],
        "partner_approaches": ["相手の知的好奇心を刺激して新しい発見を共有する", "相手の独立心を尊重して自由な関係を築く", "相手の創造性を理解して芸術的な体験を提案する", "相手の論理的思考に共感して深い会話を心がける", "相手の柔軟性を活かしたアプローチを心がける"],
        "ng_behaviors": ["知的好奇心を阻害する", "依存心を強める", "創造性を制限する"],
        "partner_ng_behaviors": ["相手の知的好奇心を否定する", "相手の独立心を束縛しようとする", "相手の創造性を制限する", "相手の論理的思考を軽視する", "相手の柔軟性を無視する"],
        "favorite_dates": ["博物館や科学館", "創造的な活動", "一人時間を尊重できる場所", "好奇心を満たせる場所", "論理的なゲーム"],
        "line_tendencies": ["論理的な分析", "創造的なアイデア", "絵文字は少なめ", "好奇心を刺激する話題", "独立心を尊重", "深い会話を好む"],
        "line_examples": [
            "今日、新しい理論について考えてたんだけど、あなたにも話してみたい💡",
            "この問題、分析してみたら意外な解決策が見えてきた。一緒に考えてみない？🤔",
            "一人で考えてたら、すごく面白いアイデア浮かんできた。あなたにも教えたいな✨",
            "この状況、新しい見方できたんだけど、あなたはどう思う？",
            "新しい分野に興味出てきて、調べてみようと思ってる。あなたも興味ある？😊"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: 新しい理論について考えてたんだけど、途中であなたのことを考えちゃって💭 あなたならどう思うかなって",
            "相手: 週末何か予定ある？\nあなた: 一人で何か面白いことしたいんだけど、あなたと一緒に新しい発見もしてみたいな。一緒に何か探検してみない？",
            "相手: 最近何か新しい発見はある？\nあなた: この問題、分析してみたら意外な解決策見つけたんだけど、あなたと一緒に考えてみたいな😊"
        ],
        "romantic_signs": [
            "一人の時間をあなたと共有したがる",
            "新しい発見をあなたと共有したい",
            "論理的な話の中にあなたへの関心を織り交ぜる",
            "好奇心をあなたと共有しようとする",
            "創造的なアイデアをあなたと一緒に実現したがる"
        ],
        "date_invitations": [
            "一人で考えてたら、あなたと一緒に新しい発見をしてみたくなった。一緒に探検してみない？💡",
            "論理的に考えて、私たちの好奇心を満たせる場所を見つけた✨",
            "創造的なアイデアを一緒に実現できる場所を計画したんだけど、どう？🎢",
            "新しい理論について話しながら、お互いを理解し合える時間を過ごしたい💭",
            "独立心を保ちながら、あなたとの絆を深められる場所を探した💕"
        ],
        "confession_examples": [
            "一人で考えてたら、あなたのことが一番大切だってわかった。あなたを愛してる💕",
            "論理的に分析してみたら、あなたが私にとって一番完璧な人だって証明できた✨",
            "新しい発見を一緒にできる人が、あなたしかいない。愛してる💡",
            "好奇心を満たせる人が、あなたしかいない。一緒に未来を探求したい💫",
            "創造的なアイデアを一緒に実現できる人が、あなたしかいない。愛してる💪"
        ],
        "relationship_strengths": [
            "論理的思考で問題を冷静に分析し、創造的な解決策を提案できる",
            "好奇心が強く、常に新しい発見や学びを共有できる",
            "独立心があり、相手の個性を尊重できる",
            "深い洞察力で相手の本質を見抜くことができる",
            "柔軟な考え方で、様々な視点から物事を捉えられる"
        ],
        "relationship_challenges": [
            "感情表現が苦手で、相手に気持ちが伝わりにくい",
            "一人の時間を重視しすぎて、相手を置いてけぼりにしてしまう",
            "実践的な行動が苦手で、計画倒れになりがち",
            "長期的な関係の維持に不安を感じる",
            "相手の感情的な要求に戸惑ってしまう"
        ],
        "relationship_hurdles": [
            "感情的なコミュニケーションの不足",
            "現実的な行動への移行の難しさ",
            "相手との価値観の違いへの対応",
            "親密さを深めることへの不安",
            "日常的な愛情表現の不足"
        ],
        "line_message_templates": [
            "「この問題について新しい視点を見つけたんだけど、あなたの意見も聞きたいな。特に〇〇の部分について深掘りしたいんだけど。」",
            "「最近〇〇について調べてて、すごく興味深い発見があった。もしよかったら一緒に探求してみない？」",
            "「一人で考えてたら、あなたと一緒に新しい発見をしてみたくなった。今度、〇〇に行ってみない？」",
            "「この理論について、あなたの独自の分析を聞かせてもらえないかな。特に〇〇の観点からの意見に興味があるんだ。」",
            "「新しい分野に興味出てきて、調べてみようと思ってる。あなたも興味ある？一緒に学んでみない？」"
        ],
        "confession_timing": "INTPは、お互いの知的な相性や価値観が十分に理解し合えたと感じたタイミングで告白されることを好みます。感情的な告白よりも、論理的な理由と共に、お互いの関係性の可能性について冷静に話し合える時が理想的です。",
        "key_points_for_confession": [
            "論理的な理由と共に気持ちを伝える",
            "お互いの知的な相性について言及する",
            "相手の個性を尊重していることを伝える",
            "冷静で誠実な態度を保つ",
            "相手の反応を尊重し、時間を与える"
        ],
        "ng_points_for_confession": [
            "感情的な過剰表現",
            "相手の個性を無視した告白",
            "論理的な根拠のない告白",
            "相手の一人時間を奪う告白",
            "急いで結論を求める告白"
        ],
        "preferred_date_plans": [
            "博物館や科学館での知的な探求",
            "静かなカフェでの深い会話",
            "新しい分野の学習や体験",
            "創造的な活動やワークショップ",
            "一人時間を尊重できる場所でのデート"
        ],
        "effective_approach_methods": [
            "知的な話題で相手の好奇心を刺激する",
            "相手の独立心を尊重し、自由な関係を築く",
            "創造的なアイデアを共有し、一緒に実現する",
            "論理的な会話を通じて深い理解を深める",
            "相手の個性を理解し、柔軟に対応する"
        ],
        "disliked_ng_behaviors": [
            "知的好奇心を阻害する行動",
            "依存心を強める要求",
            "創造性を制限する制約",
            "論理的思考を軽視する態度",
            "柔軟性を無視した固定観念"
        ],
        "disliked_people_characteristics": [
            "知的好奇心のない人",
            "依存心が強い人",
            "創造性に欠ける人",
            "非論理的な人",
            "柔軟性のない人"
        ],
        "how_to_close_distance": [
            "知的な交流を通じて信頼関係を築く",
            "相手の独立心を尊重し、適度な距離を保つ",
            "創造的な体験を共有し、絆を深める",
            "論理的な会話でお互いの理解を深める",
            "相手の個性を理解し、柔軟に対応する"
        ],
        "desired_partner_traits": [
            "知的好奇心が強い人",
            "独立心のある人",
            "創造性豊かな人",
            "論理的思考ができる人",
            "柔軟な考え方の人"
        ],
        "keys_to_successful_relationships": [
            "お互いの知的好奇心を刺激し合う",
            "独立心を尊重し、自由な関係を築く",
            "創造的な体験を共有し、成長し合う",
            "論理的な会話で深い理解を深める",
            "相手の個性を理解し、柔軟に対応する"
        ],
        "points_to_watch_out_for": [
            "感情的なコミュニケーションの不足",
            "現実的な行動への移行の難しさ",
            "相手との価値観の違いへの対応",
            "親密さを深めることへの不安",
            "日常的な愛情表現の不足"
        ]
    },
    "ENTJ": {
        "traits": ["リーダーシップ", "戦略的思考", "決断力", "効率的", "自信家", "目標志向", "人付き合いが好き"],
        "love_style": "リーダーシップを発揮して、効率的で目標志向の関係を求める恋愛スタイル。戦略的に考えて、お互いの成長をサポートし合う関係を重視する。自信家で決断力があり、相手の可能性を信じて具体的なサポートを提供する。人付き合いが好きで、効率的な愛情表現を心がける。",
        "strengths": ["リーダーシップ", "戦略的思考", "決断力", "効率的", "目標志向"],
        "challenges": ["相手の気持ちを理解", "柔軟性", "気持ちの表現", "相手のペースに合わせる"],
        "advice_style": "戦略的で効率的なアドバイス",
        "likes_in_partner": ["成長意欲", "効率的", "目標志向", "リーダーシップ", "自信", "戦略的思考"],
        "dislikes_in_partner": ["成長意欲がない", "非効率", "目標がない", "消極的", "非戦略的"],
        "common_concerns": ["相手の気持ちを理解しにくい", "柔軟性がない", "相手のペースに合わせられない"],
        "my_approaches": ["リーダーシップを発揮する", "戦略的なアプローチをする", "効率的な関係を築く"],
        "partner_approaches": ["相手のリーダーシップを尊重してサポートする", "相手の戦略的思考に共感して目標を一緒に考える", "相手の効率性に合わせた行動を心がける", "相手の決断力に信頼を置いて協力する", "相手の目標志向に敬意を払って成長をサポートする"],
        "ng_behaviors": ["成長意欲を阻害する", "非効率な行動を強要する", "目標を否定する"],
        "partner_ng_behaviors": ["相手のリーダーシップを否定する", "相手の戦略的思考を軽視する", "相手の効率性を無視する", "相手の決断力を疑う", "相手の目標志向を否定する"],
        "favorite_dates": ["効率的なレストラン", "目標志向の活動", "リーダーシップを発揮できる場所", "戦略的なゲーム", "成長を実感できる場所"],
        "line_tendencies": ["明確で簡潔な指示", "効率的なコミュニケーション", "目標志向の内容", "絵文字は少なめ", "リーダーシップを発揮", "戦略的な提案"],
        "line_examples": [
            "今週の目標整理してたら、あなたと一緒に進められることも考えてみた💪",
            "この問題、いくつか解決策思いついたんだけど、あなたの意見も聞きたいな",
            "新しいプロジェクト始めようと思ってるんだけど、あなたも参加しない？✨",
            "この状況、改善する方法考えたんだけど、一緒に取り組んでみない？",
            "私たちの関係、もっと良くする方法考えてるんだけど、どう思う？💕"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: 新しいプロジェクト進めてたんだけど、あなたと一緒に取り組めたらもっと良くなると思う😊",
            "相手: 週末何か予定ある？\nあなた: 目標に向かって何かしたいんだけど、あなたと一緒に成長を実感できる場所に行きたいな✨",
            "相手: 最近忙しそうだね\nあなた: 確かに忙しいんだけど、あなたとの時間は絶対に作りたいから、スケジュール調整してるよ💕"
        ],
        "romantic_signs": [
            "あなたと一緒に目標を達成したがる",
            "リーダーシップをあなたと共有しようとする",
            "効率性を重視しながらも、あなたとの時間を最優先にする",
            "戦略的な話の中にあなたへの配慮を織り交ぜる",
            "決断力を持って、あなたとの関係を発展させようとする"
        ],
        "date_invitations": [
            "リーダーシップを発揮して、あなたと一緒に目標を達成できる場所を計画した💪",
            "効率的に時間を使うために、あなたと一緒に成長を実感できる場所を見つけた✨",
            "戦略的に考えて、お互いの関係を次のレベルに引き上げられる場所を選んだ💕",
            "決断力を持って、あなたとの時間を最優先にした。一緒に行かない？💭",
            "目標志向で、私たちの関係を発展させられる場所を探した💫"
        ],
        "confession_examples": [
            "リーダーシップを発揮して、あなたとの関係を次のレベルに引き上げたい。愛してる💕",
            "効率的に時間を使うために、あなたとの時間を最優先にしてる。あなたを愛してる✨",
            "戦略的に考えて、あなたが私の人生の一番大切な目標だってわかった💪",
            "決断力を持って、あなたと一緒に未来を創りたい。愛してる💫",
            "目標志向で、あなたと一緒に成長していきたい。愛してる💭"
        ],
        "relationship_strengths": [
            "リーダーシップを発揮して関係を導くことができる",
            "戦略的思考で長期的な関係を計画できる",
            "決断力があり、関係の問題を迅速に解決できる",
            "効率的に時間を使い、質の高い時間を共有できる",
            "目標志向で、お互いの成長をサポートできる"
        ],
        "relationship_challenges": [
            "相手の気持ちを理解しにくい",
            "柔軟性がなく、相手のペースに合わせられない",
            "感情表現が苦手で、相手に気持ちが伝わりにくい",
            "支配的になりすぎて、相手を圧迫してしまう",
            "効率性を重視しすぎて、愛情表現が不足する"
        ],
        "relationship_hurdles": [
            "感情的なコミュニケーションの不足",
            "相手のペースを理解できない",
            "支配的な態度による関係の歪み",
            "効率性重視による愛情表現の不足",
            "相手の感情的なニーズへの対応不足"
        ],
        "line_message_templates": [
            "「今週の目標整理してたら、あなたと一緒に進められることも考えてみた。特に〇〇の部分について一緒に取り組めないかな。」",
            "「この問題、いくつか解決策思いついたんだけど、あなたの意見も聞きたい。特に〇〇の観点からのアドバイスが欲しい。」",
            "「新しいプロジェクト始めようと思ってるんだけど、あなたも参加しない？一緒に成長できると思う。」",
            "「この状況、改善する方法考えたんだけど、一緒に取り組んでみない？効率的に進められると思う。」",
            "「私たちの関係、もっと良くする方法考えてるんだけど、どう思う？具体的な計画を立てたい。」"
        ],
        "confession_timing": "ENTJは、お互いの目標や価値観が明確になり、将来のビジョンが共有できたタイミングで告白されることを好みます。戦略的に考えて、関係の可能性について具体的に話し合える時が理想的です。",
        "key_points_for_confession": [
            "具体的な目標や将来のビジョンを共有する",
            "戦略的な理由と共に気持ちを伝える",
            "効率的な関係の構築について言及する",
            "リーダーシップを発揮して関係を導く意思を示す",
            "相手の成長をサポートする意思を伝える"
        ],
        "ng_points_for_confession": [
            "感情的な過剰表現",
            "具体的な根拠のない告白",
            "相手のペースを無視した告白",
            "支配的な態度での告白",
            "効率性を重視しすぎた告白"
        ],
        "preferred_date_plans": [
            "効率的で質の高いレストラン",
            "目標達成を実感できる活動",
            "リーダーシップを発揮できる場所",
            "戦略的なゲームやアクティビティ",
            "成長を実感できるワークショップ"
        ],
        "effective_approach_methods": [
            "リーダーシップを発揮して関係を導く",
            "戦略的な思考で長期的な関係を計画する",
            "効率的に時間を使い、質の高い時間を共有する",
            "相手の成長をサポートし、目標達成を支援する",
            "決断力を持って関係の問題を解決する"
        ],
        "disliked_ng_behaviors": [
            "成長意欲を阻害する行動",
            "非効率な行動の強要",
            "目標を否定する態度",
            "消極的な態度",
            "非戦略的な考え方"
        ],
        "disliked_people_characteristics": [
            "成長意欲のない人",
            "非効率な人",
            "目標のない人",
            "消極的な人",
            "非戦略的な人"
        ],
        "how_to_close_distance": [
            "リーダーシップを発揮して関係を導く",
            "戦略的な思考で長期的な関係を計画する",
            "効率的に時間を使い、質の高い時間を共有する",
            "相手の成長をサポートし、目標達成を支援する",
            "決断力を持って関係の問題を解決する"
        ],
        "desired_partner_traits": [
            "成長意欲の高い人",
            "効率的な人",
            "目標志向の人",
            "リーダーシップのある人",
            "戦略的思考の人"
        ],
        "keys_to_successful_relationships": [
            "リーダーシップを発揮して関係を導く",
            "戦略的な思考で長期的な関係を計画する",
            "効率的に時間を使い、質の高い時間を共有する",
            "相手の成長をサポートし、目標達成を支援する",
            "決断力を持って関係の問題を解決する"
        ],
        "points_to_watch_out_for": [
            "感情的なコミュニケーションの不足",
            "相手のペースを理解できない",
            "支配的な態度による関係の歪み",
            "効率性重視による愛情表現の不足",
            "相手の感情的なニーズへの対応不足"
        ]
    },
    "ENTP": {
        "traits": ["アイデア豊富", "臨機応変", "話し合いが好き", "冒険心", "機転が利く", "柔軟", "人付き合いが好き"],
        "love_style": "刺激的で変化に富んだ関係を求める恋愛スタイル。新しい体験や冒険を共有して、お互いを楽しませ合う関係を大切にする。ユーモアと創造性を武器にして、いつも新鮮で魅力的な愛情表現を心がける。柔軟性があって、相手の興味や関心に合わせてアプローチを変える。",
        "strengths": ["ユーモア", "新しいアイデア", "相手を楽しませる", "臨機応変", "創造性"],
        "challenges": ["一貫性がない", "深い気持ちの共有", "長期的な関係", "気持ちの安定"],
        "advice_style": "創造的で新しいアプローチ",
        "likes_in_partner": ["刺激", "創造性", "冒険心", "頭を使った会話", "柔軟", "ユーモア"],
        "dislikes_in_partner": ["退屈", "昔ながらの価値観", "束縛", "感情的な要求", "理屈の通らないこと"],
        "common_concerns": ["一貫性がない", "気持ちが安定しない", "長期的な関係が苦手"],
        "my_approaches": ["刺激的なデートを提案する", "創造的なアプローチをする", "柔軟な関係を築く"],
        "partner_approaches": ["相手の創造性を刺激する新しい体験を提案する", "相手のユーモアに合わせた楽しい会話をする", "相手の柔軟性を活かした変化に富んだ関係を築く", "相手の冒険心を満たす刺激的なデートを計画する", "相手の臨機応変さに合わせたアプローチを心がける"],
        "ng_behaviors": ["束縛する", "昔ながらの価値観を強要する", "感情的な要求を押し付ける"],
        "partner_ng_behaviors": ["相手の創造性を制限する", "相手の柔軟性を無視した固定観念を押し付ける", "相手の冒険心を阻害する", "相手のユーモアを否定する", "相手の変化を嫌う"],
        "favorite_dates": ["新しい冒険スポーツ", "エスケープルーム", "実験的な料理店", "アートギャラリー", "即興の旅行"],
        "line_tendencies": ["ユーモアたっぷりの会話", "新しいアイデアの共有", "絵文字を多用", "話題がコロコロ変わる", "即座に返信", "楽しい話が好き"],
        "line_examples": [
            "今日、すごく面白いアイデア浮かんできたんだけど、あなたと一緒に実現してみたい✨",
            "新しい体験してみたいんだけど、一緒に冒険してみない？🎢",
            "すごく興味深い発見があったんだけど、あなたにも話したい💡",
            "この問題、創造的な解決策思いついたんだけど、一緒に試してみない？🤔",
            "この状況、新しい見方できたんだけど、あなたはどう思う？😊"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: すごく面白いアイデア浮かんできて、新しいプロジェクト始めたんだけど、あなたと一緒に取り組めたらもっと楽しいと思う✨",
            "相手: 週末何か予定ある？\nあなた: 新しい体験したいんだけど、一緒に冒険してみない？🎢",
            "相手: 最近何か新しい発見はある？\nあなた: この問題、創造的な解決策見つけたんだけど、あなたと一緒に探求してみたい💡"
        ],
        "romantic_signs": [
            "創造的なアイデアをあなたと一緒に実現したがる",
            "冒険心をあなたと共有しようとする",
            "新しい発見をあなたと共有したい",
            "柔軟な考えをあなたと共有しようとする",
            "好奇心をあなたと一緒に満たそうとする"
        ],
        "date_invitations": [
            "すごく面白いアイデア浮かんできて、あなたと一緒に実現してみたい。一緒に冒険してみない？✨",
            "新しい体験を一緒にしてみたいんだけど、あなたと一緒ならもっと楽しいと思う🎢",
            "創造的な解決策を一緒に試してみたい場所を見つけた💡",
            "好奇心を満たせる場所を計画したんだけど、一緒に探検してみない？💕",
            "柔軟に考えて、お互いを刺激し合える場所を選んだ💫"
        ],
        "confession_examples": [
            "創造的なアイデアを一緒に実現できる人が、あなたしかいない。愛してる💕",
            "冒険心を満たせる人が、あなたしかいない。一緒に新しい体験をしたい✨",
            "新しい発見を一緒にできる人が、あなたしかいない。愛してる🎢",
            "柔軟に考えて、お互いを刺激し合える人が、あなたしかいない💡",
            "好奇心を一緒に満たせる人が、あなたしかいない。愛してる💫"
        ],
        "relationship_strengths": [
            "創造性豊かで、常に新しい体験を提供できる",
            "ユーモアがあり、相手を楽しませることができる",
            "柔軟性があり、相手の興味に合わせて対応できる",
            "冒険心があり、刺激的な関係を築ける",
            "臨機応変で、様々な状況に対応できる"
        ],
        "relationship_challenges": [
            "一貫性がなく、相手に不安を与えてしまう",
            "深い気持ちの共有が苦手",
            "長期的な関係の維持に不安を感じる",
            "気持ちが安定せず、相手を混乱させる",
            "刺激を求めすぎて、落ち着いた関係が苦手"
        ],
        "relationship_hurdles": [
            "一貫性のない行動による信頼の欠如",
            "深い感情的な絆の構築の難しさ",
            "長期的な関係への不安",
            "刺激を求めすぎる傾向",
            "落ち着いた関係への適応の難しさ"
        ],
        "line_message_templates": [
            "「今日、すごく面白いアイデア浮かんできたんだけど、あなたと一緒に実現してみたい。特に〇〇の部分について一緒に挑戦してみない？」",
            "「新しい体験してみたいんだけど、一緒に冒険してみない？〇〇に行ってみようと思ってるんだけど。」",
            "「すごく興味深い発見があったんだけど、あなたにも話したい。〇〇について新しい見方を見つけたんだ。」",
            "「この問題、創造的な解決策思いついたんだけど、一緒に試してみない？〇〇の方法でアプローチしてみよう。」",
            "「この状況、新しい見方できたんだけど、あなたはどう思う？〇〇の視点から考えてみたんだけど。」"
        ],
        "confession_timing": "ENTPは、お互いの創造性や冒険心が刺激され、新しい可能性を感じられたタイミングで告白されることを好みます。刺激的で変化に富んだ関係の可能性について話し合える時が理想的です。",
        "key_points_for_confession": [
            "創造的な理由と共に気持ちを伝える",
            "お互いの冒険心や刺激について言及する",
            "柔軟な関係の可能性について話す",
            "ユーモアを交えて楽しい告白をする",
            "新しい体験を共有したい気持ちを伝える"
        ],
        "ng_points_for_confession": [
            "感情的な過剰表現",
            "束縛的な告白",
            "創造性を無視した告白",
            "刺激のない平凡な告白",
            "柔軟性を無視した告白"
        ],
        "preferred_date_plans": [
            "新しい冒険スポーツやアクティビティ",
            "エスケープルームや謎解きゲーム",
            "実験的な料理店や新しい体験",
            "アートギャラリーや創造的な場所",
            "即興の旅行や予期しない体験"
        ],
        "effective_approach_methods": [
            "創造的なアイデアで相手を刺激する",
            "ユーモアを交えて楽しい関係を築く",
            "柔軟な考えで相手の興味に合わせる",
            "冒険心を満たす刺激的な体験を提供する",
            "臨機応変に対応して関係を発展させる"
        ],
        "disliked_ng_behaviors": [
            "束縛する行動",
            "昔ながらの価値観の強要",
            "感情的な要求の押し付け",
            "創造性を制限する制約",
            "柔軟性を無視した固定観念"
        ],
        "disliked_people_characteristics": [
            "退屈な人",
            "昔ながらの価値観の人",
            "束縛的な人",
            "感情的な要求が多い人",
            "理屈の通らない人"
        ],
        "how_to_close_distance": [
            "創造的なアイデアで相手を刺激する",
            "ユーモアを交えて楽しい関係を築く",
            "柔軟な考えで相手の興味に合わせる",
            "冒険心を満たす刺激的な体験を提供する",
            "臨機応変に対応して関係を発展させる"
        ],
        "desired_partner_traits": [
            "刺激的な人",
            "創造性豊かな人",
            "冒険心のある人",
            "頭を使った会話ができる人",
            "柔軟な考えの人"
        ],
        "keys_to_successful_relationships": [
            "創造的なアイデアで相手を刺激する",
            "ユーモアを交えて楽しい関係を築く",
            "柔軟な考えで相手の興味に合わせる",
            "冒険心を満たす刺激的な体験を提供する",
            "臨機応変に対応して関係を発展させる"
        ],
        "points_to_watch_out_for": [
            "一貫性のない行動による信頼の欠如",
            "深い感情的な絆の構築の難しさ",
            "長期的な関係への不安",
            "刺激を求めすぎる傾向",
            "落ち着いた関係への適応の難しさ"
        ]
    },
    "INFJ": {
        "traits": ["相手の気持ちを理解する", "理想を追い求める", "物事の本質を見抜く", "創造性", "相手のために尽くす", "深い愛情", "神秘的な魅力"],
        "love_style": "心の深いところでの絆と本当の理解を求める恋愛スタイル。相手の心の奥底まで理解して、無条件の愛情で包み込む関係を大切にする。理想主義的で、完璧な愛を追求するけど、現実とのバランスも大切にする。相手の成長をサポートして、深い洞察力で関係を導く。",
        "strengths": ["相手の気持ちを理解する", "深い愛情", "成長をサポート", "物事の本質を見抜く", "創造性"],
        "challenges": ["完璧を求める", "相手の期待に応えすぎる", "気持ち的な疲労", "現実との折り合い"],
        "advice_style": "気持ち的で共感的なアドバイス",
        "likes_in_partner": ["深い理解", "成長したい気持ち", "理想を追い求める", "創造性", "誠実さ", "心の絆"],
        "dislikes_in_partner": ["表面的な関係", "不誠実", "成長意欲のない", "現実的すぎる", "気持ち的な理解不足"],
        "common_concerns": ["相手が自分の深い気持ちを理解してくれない", "完璧主義で相手を追い詰めてしまう", "気持ち的な疲労"],
        "my_approaches": ["深い会話で心を通わせる", "相手の成長をサポートする", "心の絆を築く"],
        "partner_approaches": ["相手の深い気持ちを理解して共感を示す", "相手の理想主義に寄り添ってサポートする", "相手の洞察力に敬意を払って深い会話を心がける", "相手の創造性を刺激して心の絆を深める", "相手の献身性に感謝して同じ愛情で返す"],
        "ng_behaviors": ["表面的な関係を求める", "不誠実な態度", "気持ち的な理解を怠る"],
        "partner_ng_behaviors": ["相手の深い気持ちを軽視する", "相手の理想主義を否定する", "相手の洞察力を無視する", "相手の献身性を当たり前と思う", "相手の心の絆を軽視する"],
        "favorite_dates": ["静かな公園での散歩", "心の話ができるカフェ", "美術館で深い会話", "自然の中でのピクニック", "詩や文学の朗読会"],
        "line_tendencies": ["深い心の話を好む", "相手の気持ちを理解しようとする", "絵文字は控えめ", "長文で丁寧に", "夜の静かな時間に返信", "詩的な表現が好き"],
        "line_examples": [
            "今日、あなたのことを考えてたら、心の深い部分で理解が深まった気がする💕",
            "私たちの関係、もっと深くできる可能性を感じてる✨",
            "あなたの本当の気持ち、もっと理解したいな💭",
            "すごくいいアイデア浮かんできて、一緒に心の絆を深めたい💫",
            "あなたの成長をサポートしたい気持ちが強くなってる💪"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: あなたのことを考えてたら、心の深い部分で理解が深まった。私たちの関係、もっと深くできる可能性を感じてる💕",
            "相手: 週末何か予定ある？\nあなた: 静かな場所で深い会話したいんだけど、一緒に心の絆を深めない？✨",
            "相手: 最近何か感じることがある？\nあなた: すごくいいアイデア浮かんできて、あなたの成長をサポートしたい。心の深い部分を共有したい💫"
        ],
        "romantic_signs": [
            "心の深い部分をあなたと共有したがる",
            "理想をあなたと一緒に追い求めようとする",
            "物事の本質をあなたと一緒に見抜こうとする",
            "創造的なアイデアをあなたと一緒に実現したがる",
            "あなたの成長を積極的にサポートしようとする"
        ],
        "date_invitations": [
            "心の深い部分を理解し合える場所を見つけたんだけど、一緒に行ってみない？💕",
            "理想を一緒に追い求められる場所を計画した✨",
            "物事の本質を一緒に見抜けるような深い会話ができる場所を選んだ💭",
            "創造的なアイデアを一緒に実現できる場所を見つけた💫",
            "あなたの成長をサポートできるような場所に行ってみない？💪"
        ],
        "confession_examples": [
            "心の深い部分で、あなたのことを理解してる。あなたを愛してる💕",
            "理想を一緒に追い求められる人が、あなたしかいない。愛してる✨",
            "物事の本質を一緒に見抜ける人が、あなたしかいない💭",
            "創造的なアイデアを一緒に実現できる人が、あなたしかいない💫",
            "あなたの成長をサポートしたい。愛してる💪"
        ],
        "relationship_strengths": [
            "相手の気持ちを深く理解し、共感を示すことができる",
            "理想主義的で、深い愛情を提供できる",
            "物事の本質を見抜く洞察力がある",
            "創造性豊かで、心の絆を深めることができる",
            "相手の成長を積極的にサポートできる"
        ],
        "relationship_challenges": [
            "完璧を求めすぎて、相手を追い詰めてしまう",
            "相手の期待に応えすぎて、自分を見失ってしまう",
            "気持ち的な疲労を感じやすい",
            "現実との折り合いがつきにくい",
            "深すぎる理解で相手を圧迫してしまう"
        ],
        "relationship_hurdles": [
            "完璧主義による関係の歪み",
            "相手への過度な期待",
            "気持ち的な疲労の蓄積",
            "現実とのギャップへの対応",
            "深すぎる理解による圧迫感"
        ],
        "line_message_templates": [
            "「今日、あなたのことを考えてたら、心の深い部分で理解が深まった気がする。特に〇〇の部分について、もっと理解したいな。」",
            "「私たちの関係、もっと深くできる可能性を感じてる。〇〇について一緒に考えてみない？」",
            "「あなたの本当の気持ち、もっと理解したい。〇〇について話してみない？」",
            "「すごくいいアイデア浮かんできて、一緒に心の絆を深めたい。〇〇について一緒に取り組んでみない？」",
            "「あなたの成長をサポートしたい気持ちが強くなってる。〇〇について一緒に考えてみない？」"
        ],
        "confession_timing": "INFJは、お互いの心の深い部分での理解が深まり、理想的な関係の可能性を感じられたタイミングで告白されることを好みます。深い愛情と共感に基づいた、心の絆を重視した告白が理想的です。",
        "key_points_for_confession": [
            "心の深い部分での理解について言及する",
            "理想的な関係の可能性について話す",
            "相手の成長をサポートしたい気持ちを伝える",
            "深い愛情と共感を示す",
            "心の絆を重視した告白をする"
        ],
        "ng_points_for_confession": [
            "表面的な告白",
            "理想を無視した告白",
            "相手の成長を軽視した告白",
            "深い理解を無視した告白",
            "心の絆を軽視した告白"
        ],
        "preferred_date_plans": [
            "静かな公園での散歩",
            "心の話ができるカフェ",
            "美術館で深い会話",
            "自然の中でのピクニック",
            "詩や文学の朗読会"
        ],
        "effective_approach_methods": [
            "相手の気持ちを深く理解し、共感を示す",
            "理想主義的な愛情を提供する",
            "物事の本質を見抜く洞察力を活かす",
            "創造性豊かな心の絆を築く",
            "相手の成長を積極的にサポートする"
        ],
        "disliked_ng_behaviors": [
            "表面的な関係を求める行動",
            "不誠実な態度",
            "気持ち的な理解を怠る行動",
            "理想を否定する態度",
            "成長意欲を阻害する行動"
        ],
        "disliked_people_characteristics": [
            "表面的な人",
            "不誠実な人",
            "気持ち的な理解のない人",
            "理想のない人",
            "成長意欲のない人"
        ],
        "how_to_close_distance": [
            "相手の気持ちを深く理解し、共感を示す",
            "理想主義的な愛情を提供する",
            "物事の本質を見抜く洞察力を活かす",
            "創造性豊かな心の絆を築く",
            "相手の成長を積極的にサポートする"
        ],
        "desired_partner_traits": [
            "深い理解のある人",
            "成長したい気持ちのある人",
            "理想を追い求める人",
            "創造性豊かな人",
            "誠実な人"
        ],
        "keys_to_successful_relationships": [
            "相手の気持ちを深く理解し、共感を示す",
            "理想主義的な愛情を提供する",
            "物事の本質を見抜く洞察力を活かす",
            "創造性豊かな心の絆を築く",
            "相手の成長を積極的にサポートする"
        ],
        "points_to_watch_out_for": [
            "完璧主義による関係の歪み",
            "相手への過度な期待",
            "気持ち的な疲労の蓄積",
            "現実とのギャップへの対応",
            "深すぎる理解による圧迫感"
        ]
    },
    "INFP": {
        "traits": ["深い気持ち", "創造性", "理想主義", "一人の時間が好き", "相手の気持ちを理解する", "個性を尊重", "価値観を大切にする"],
        "love_style": "深い気持ち的な絆と創造的な関係を求める恋愛スタイル。理想主義的で、お互いの個性を尊重し合う関係を重視する。一人の時間を大切にして、価値観を共有する関係を心がける。創造的で詩的な愛情表現が得意で、相手の気持ちを深く理解する。",
        "strengths": ["深い気持ち", "創造性", "理想主義", "相手の気持ちを理解する", "個性を尊重"],
        "challenges": ["現実との折り合い", "気持ちの起伏が激しい", "相手の期待に応えすぎる"],
        "advice_style": "詩的で気持ち的なアドバイス",
        "likes_in_partner": ["深い気持ち", "創造性", "個性", "理想を追い求める", "相手の気持ちを理解する", "価値観の一致"],
        "dislikes_in_partner": ["表面的な関係", "創造的でない", "個性を尊重しない", "現実的すぎる", "気持ち的な理解不足"],
        "common_concerns": ["現実との折り合いがつかない", "気持ちの起伏が激しい", "相手の期待に応えすぎる"],
        "my_approaches": ["深い気持ちを共有する", "創造的なアプローチをする", "個性を尊重する"],
        "partner_approaches": ["相手の深い気持ちを受け入れて共感を示す", "相手の創造性を刺激して芸術的な体験を共有する", "相手の個性を無条件で受け入れる", "相手の理想主義に理解を示してサポートする", "相手の価値観を尊重して一致点を見つける"],
        "ng_behaviors": ["表面的な関係を求める", "個性を尊重しない", "気持ち的な理解を怠る"],
        "partner_ng_behaviors": ["相手の深い気持ちを軽視する", "相手の創造性を否定する", "相手の個性を否定する", "相手の理想主義を現実的すぎる態度で否定する", "相手の価値観を軽視する"],
        "favorite_dates": ["古い本屋での探検", "自然の中での散歩", "アート制作を一緒に", "詩の朗読会", "星空を見る"],
        "line_tendencies": ["詩的な表現が好き", "相手の個性を尊重", "絵文字は控えめ", "心の深い話を好む", "返信は時間をかけて", "美しい言葉を選ぶ"],
        "line_examples": [
            "今日、すごく深い気持ちを感じて、詩を書きたくなった💕",
            "すごくいいアイデア浮かんできて、一緒にアートを作ってみたい✨",
            "私たちの関係、すごく美しいなって感じてる💫",
            "お互いの個性を大切にして、価値観も理解し合いたい💭",
            "一人で考えてたら、心の深い部分を探求してた。あなたと共有したいな"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: すごく深い気持ちを感じて、詩を書きたくなった。すごくいいアイデアも浮かんできて、心が動かされた💕",
            "相手: 週末何か予定ある？\nあなた: 自然の中での散歩したいんだけど、一緒にアート制作もしてみない？✨",
            "相手: 最近何か感じることがある？\nあなた: お互いの個性を大切にして、価値観も理解し合いたい。心の深い部分を探求してる💫"
        ],
        "romantic_signs": [
            "深い気持ちをあなたと共有したがる",
            "創造的なアイデアをあなたと一緒に実現したがる",
            "理想をあなたと一緒に追い求めようとする",
            "個性をあなたと一緒に尊重しようとする",
            "価値観をあなたと一緒に探求しようとする"
        ],
        "date_invitations": [
            "深い気持ちを共有できる場所を見つけたんだけど、一緒に行ってみない？💕",
            "創造的なアイデアを一緒に実現できる場所を計画した✨",
            "お互いの個性を尊重し合える場所を選んだ💭",
            "価値観を共有できるような深い会話ができる場所を見つけた💫",
            "理想を一緒に追い求められる場所に行ってみない？💪"
        ],
        "confession_examples": [
            "深い気持ちで、あなたのことを愛してる💕",
            "創造的なアイデアを一緒に実現できる人が、あなたしかいない✨",
            "お互いの個性を尊重し合える人が、あなたしかいない💭",
            "価値観を共有できる人が、あなたしかいない💫",
            "理想を一緒に追い求められる人が、あなたしかいない。愛してる💪"
        ],
        "relationship_strengths": [
            "深い気持ちを理解し、共感を示すことができる",
            "創造性豊かで、心の絆を深めることができる",
            "理想主義的で、深い愛情を提供できる",
            "個性を尊重し、相手を受け入れることができる",
            "価値観を大切にし、意味のある関係を築ける"
        ],
        "relationship_challenges": [
            "現実との折り合いがつきにくい",
            "気持ちの起伏が激しく、相手を混乱させる",
            "相手の期待に応えすぎて、自分を見失ってしまう",
            "理想が高すぎて、現実的な関係が苦手",
            "一人の時間を重視しすぎて、相手を置いてけぼりにする"
        ],
        "relationship_hurdles": [
            "現実とのギャップへの対応",
            "気持ちの起伏による関係の不安定さ",
            "相手への過度な期待",
            "理想と現実のバランス",
            "一人時間と関係のバランス"
        ],
        "line_message_templates": [
            "「今日、すごく深い気持ちを感じて、詩を書きたくなった。特に〇〇について、あなたと共有したいな。」",
            "「すごくいいアイデア浮かんできて、一緒にアートを作ってみたい。〇〇について一緒に取り組んでみない？」",
            "「私たちの関係、すごく美しいなって感じてる。〇〇について一緒に考えてみない？」",
            "「お互いの個性を大切にして、価値観も理解し合いたい。〇〇について話してみない？」",
            "「一人で考えてたら、心の深い部分を探求してた。あなたと共有したいな。」"
        ],
        "confession_timing": "INFPは、お互いの深い気持ちや価値観が理解し合え、創造的な絆が感じられたタイミングで告白されることを好みます。理想主義的な愛情と個性の尊重に基づいた告白が理想的です。",
        "key_points_for_confession": [
            "深い気持ちと価値観について言及する",
            "創造的な絆について話す",
            "個性の尊重について伝える",
            "理想主義的な愛情を示す",
            "心の深い部分での理解を強調する"
        ],
        "ng_points_for_confession": [
            "表面的な告白",
            "個性を無視した告白",
            "価値観を軽視した告白",
            "現実的すぎる告白",
            "創造性を無視した告白"
        ],
        "preferred_date_plans": [
            "古い本屋での探検",
            "自然の中での散歩",
            "アート制作を一緒に",
            "詩の朗読会",
            "星空を見る"
        ],
        "effective_approach_methods": [
            "深い気持ちを理解し、共感を示す",
            "創造性豊かな体験を共有する",
            "理想主義的な愛情を提供する",
            "個性を尊重し、相手を受け入れる",
            "価値観を大切にした関係を築く"
        ],
        "disliked_ng_behaviors": [
            "表面的な関係を求める行動",
            "個性を尊重しない態度",
            "気持ち的な理解を怠る行動",
            "創造性を否定する態度",
            "価値観を軽視する行動"
        ],
        "disliked_people_characteristics": [
            "表面的な人",
            "個性を尊重しない人",
            "気持ち的な理解のない人",
            "創造的でない人",
            "価値観を軽視する人"
        ],
        "how_to_close_distance": [
            "深い気持ちを理解し、共感を示す",
            "創造性豊かな体験を共有する",
            "理想主義的な愛情を提供する",
            "個性を尊重し、相手を受け入れる",
            "価値観を大切にした関係を築く"
        ],
        "desired_partner_traits": [
            "深い気持ちのある人",
            "創造性豊かな人",
            "個性を尊重する人",
            "理想を追い求める人",
            "価値観を大切にする人"
        ],
        "keys_to_successful_relationships": [
            "深い気持ちを理解し、共感を示す",
            "創造性豊かな体験を共有する",
            "理想主義的な愛情を提供する",
            "個性を尊重し、相手を受け入れる",
            "価値観を大切にした関係を築く"
        ],
        "points_to_watch_out_for": [
            "現実とのギャップへの対応",
            "気持ちの起伏による関係の不安定さ",
            "相手への過度な期待",
            "理想と現実のバランス",
            "一人時間と関係のバランス"
        ]
    },
    "ENFJ": {
        "traits": ["相手の気持ちを理解する", "リーダー気質", "協調性", "相手のために尽くす", "人付き合いが好き", "成長をサポート", "調和を大切にする"],
        "love_style": "恋人の成長と幸せを最優先にする恋愛スタイル。相手をサポートして、調和のある関係を築くことに情熱を注ぐ。コミュニケーションを重視して、お互いの気持ちを理解し合う関係を大切にする。相手の可能性を信じて、具体的なサポートで関係を発展させる。",
        "strengths": ["相手をサポート", "コミュニケーション", "調和を創る", "成長をサポート", "相手の気持ちを理解する"],
        "challenges": ["自分の気持ちを後回し", "相手に依存されすぎる", "完璧主義", "気持ち的な疲労"],
        "advice_style": "サポート的で励ましのアドバイス",
        "likes_in_partner": ["成長したい気持ち", "協調性", "感謝の気持ち", "コミュニケーション", "調和", "誠実さ"],
        "dislikes_in_partner": ["成長意欲のない", "非協調的", "感謝の気持ちがない", "コミュニケーション不足", "不誠実"],
        "common_concerns": ["相手に依存されすぎる", "自分の気持ちを後回しにしてしまう", "完璧主義"],
        "my_approaches": ["相手の成長をサポートする", "調和を創る", "コミュニケーションを大切にする"],
        "partner_approaches": ["相手のサポートに感謝して同じ愛情で返す", "相手の調和を重視した行動を心がける", "相手のコミュニケーションに積極的に応える", "相手の成長サポートに協力して自分も成長する", "相手の共感力に信頼を置いて心を開く"],
        "ng_behaviors": ["成長意欲を阻害する", "非協調的な態度", "感謝の気持ちを表さない"],
        "partner_ng_behaviors": ["相手のサポートを当たり前と思う", "相手の調和を乱す", "相手のコミュニケーションを無視する", "相手の成長サポートを軽視する", "相手の共感力を否定する"],
        "favorite_dates": ["相手の成長をサポートする活動", "調和のあるグループ活動", "心の話ができる場所", "相手の興味に合わせた場所", "感謝の気持ちを伝えられる場所"],
        "line_tendencies": ["相手を励ますメッセージ", "感謝の気持ちを表現", "絵文字を多用", "相手の成長をサポート", "調和を重視", "即座に返信"],
        "line_examples": [
            "今日、あなたの成長をサポートできて、すごく嬉しかった💕",
            "お互いの気持ちを理解し合って、調和を大切にしたい✨",
            "あなたがいてくれること、本当に感謝してる💫",
            "心の話、もっとしてみたいな💭",
            "あなたの可能性を信じて、サポートしたい気持ちが強くなってる💪"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: あなたの成長をサポートできて、すごく嬉しかった。お互いの気持ちを理解し合えて、調和も感じられた💕",
            "相手: 週末何か予定ある？\nあなた: あなたの興味に合わせた場所を計画してるんだけど、一緒に心の話ができる場所に行かない？✨",
            "相手: 最近何か感じることがある？\nあなた: あなたがいてくれること、本当に感謝してる。もっとコミュニケーションを大切にしたい💫"
        ],
        "romantic_signs": [
            "あなたの成長を積極的にサポートしようとする",
            "調和をあなたと一緒に創ろうとする",
            "感謝の気持ちをあなたに積極的に表現する",
            "コミュニケーションをあなたと大切にしようとする",
            "相手の可能性をあなたと一緒に信じようとする"
        ],
        "date_invitations": [
            "あなたの興味に合わせた場所を計画してるんだけど、一緒に行かない？✨",
            "心の話ができる場所を見つけたんだけど、一緒に行ってみない？💕",
            "あなたと一緒に過ごせる時間を作ったんだけど、どう？💫",
            "調和のある場所で、お互いの気持ちを理解し合える時間を過ごしたい💭",
            "あなたの成長をサポートできるような場所に行ってみない？💪"
        ],
        "confession_examples": [
            "あなたと一緒にいる時間が、私にとって一番大切な時間になってる。あなたのことを、もっと深く知りたい💕",
            "あなたがいてくれることで、私の世界がもっと豊かになった。これからも一緒に成長していきたい✨",
            "あなたへの感謝の気持ちが、愛に変わってる。お互いを支え合える関係になりたい💫",
            "あなたとのコミュニケーションが、私にとって一番心が動く瞬間。もっと深い関係を築きたい💭",
            "あなたの可能性を信じて、一緒に未来を創っていきたい。愛してる💪"
        ],
        "relationship_strengths": [
            "相手の成長を積極的にサポートできる",
            "調和のある関係を創ることができる",
            "感謝の気持ちを表現できる",
            "コミュニケーションを大切にできる",
            "相手の可能性を信じてサポートできる"
        ],
        "relationship_challenges": [
            "自分の気持ちを後回しにしてしまう",
            "相手に依存されすぎて疲弊する",
            "完璧主義で相手を追い詰めてしまう",
            "気持ち的な疲労を感じやすい",
            "相手の期待に応えすぎて自分を見失う"
        ],
        "relationship_hurdles": [
            "自分の気持ちを後回しにする傾向",
            "相手への過度な依存",
            "完璧主義による関係の歪み",
            "気持ち的な疲労の蓄積",
            "相手の期待への過度な対応"
        ],
        "line_message_templates": [
            "「今日、あなたの成長をサポートできて、すごく嬉しかった。特に〇〇の部分について、もっとサポートしたいな。」",
            "「お互いの気持ちを理解し合って、調和を大切にしたい。〇〇について一緒に考えてみない？」",
            "「あなたがいてくれること、本当に感謝してる。〇〇についてもっと話してみたいな。」",
            "「心の話、もっとしてみたい。〇〇についてあなたの気持ちを聞かせて。」",
            "「あなたの可能性を信じて、サポートしたい気持ちが強くなってる。〇〇について一緒に取り組んでみない？」"
        ],
        "confession_timing": "ENFJは、お互いの成長と調和が感じられ、感謝の気持ちが深まったタイミングで告白されることを好みます。相手の可能性を信じ、サポートし合える関係の可能性について話し合える時が理想的です。",
        "key_points_for_confession": [
            "相手の成長をサポートしたい気持ちを伝える",
            "調和のある関係について言及する",
            "感謝の気持ちを表現する",
            "コミュニケーションの大切さを強調する",
            "相手の可能性を信じる気持ちを伝える"
        ],
        "ng_points_for_confession": [
            "自分の気持ちを無視した告白",
            "相手への依存を強める告白",
            "完璧主義的な告白",
            "感謝の気持ちのない告白",
            "コミュニケーションを軽視した告白"
        ],
        "preferred_date_plans": [
            "相手の成長をサポートする活動",
            "調和のあるグループ活動",
            "心の話ができる場所",
            "相手の興味に合わせた場所",
            "感謝の気持ちを伝えられる場所"
        ],
        "effective_approach_methods": [
            "相手の成長を積極的にサポートする",
            "調和のある関係を創る",
            "感謝の気持ちを表現する",
            "コミュニケーションを大切にする",
            "相手の可能性を信じてサポートする"
        ],
        "disliked_ng_behaviors": [
            "成長意欲を阻害する行動",
            "非協調的な態度",
            "感謝の気持ちを表さない行動",
            "コミュニケーションを無視する態度",
            "相手の可能性を否定する行動"
        ],
        "disliked_people_characteristics": [
            "成長意欲のない人",
            "非協調的な人",
            "感謝の気持ちのない人",
            "コミュニケーション不足の人",
            "相手の可能性を否定する人"
        ],
        "how_to_close_distance": [
            "相手の成長を積極的にサポートする",
            "調和のある関係を創る",
            "感謝の気持ちを表現する",
            "コミュニケーションを大切にする",
            "相手の可能性を信じてサポートする"
        ],
        "desired_partner_traits": [
            "成長したい気持ちのある人",
            "協調性のある人",
            "感謝の気持ちのある人",
            "コミュニケーションを大切にする人",
            "調和を重視する人"
        ],
        "keys_to_successful_relationships": [
            "相手の成長を積極的にサポートする",
            "調和のある関係を創る",
            "感謝の気持ちを表現する",
            "コミュニケーションを大切にする",
            "相手の可能性を信じてサポートする"
        ],
        "points_to_watch_out_for": [
            "自分の気持ちを後回しにする傾向",
            "相手への過度な依存",
            "完璧主義による関係の歪み",
            "気持ち的な疲労の蓄積",
            "相手の期待への過度な対応"
        ]
    },
    "ENFP": {
        "traits": ["情熱的", "創造性", "臨機応変", "相手の気持ちを理解する", "人付き合いが好き", "冒険心", "楽観的"],
        "love_style": "情熱的で冒険的な愛を求める恋愛スタイル。新しい体験と気持ちを共有して、お互いを楽しませ合う関係を大切にする。楽観的で前向きなアプローチを心がけて、相手の可能性を信じてサポートする。気持ち表現が豊かで、創造的で魅力的な愛情表現が得意。",
        "strengths": ["相手を楽しませる", "深い愛情", "新しい体験", "創造性", "相手の気持ちを理解する"],
        "challenges": ["一貫性がない", "気持ちの起伏", "長期的な計画", "現実との折り合い"],
        "advice_style": "情熱的で創造的なアドバイス",
        "likes_in_partner": ["冒険心", "創造性", "楽観的", "新しい体験", "深い気持ち", "柔軟"],
        "dislikes_in_partner": ["退屈", "創造的でない", "悲観的", "変化を嫌う", "気持ち的な理解不足"],
        "common_concerns": ["一貫性がない", "気持ちの起伏が激しい", "長期的な計画が苦手"],
        "my_approaches": ["冒険的なデートを提案する", "創造的なアプローチをする", "新しい体験を共有する"],
        "partner_approaches": ["相手の楽観性に合わせた前向きな態度を心がける", "相手の創造性を刺激して新しい体験を提案する", "相手の冒険心を満たす刺激的なデートを計画する", "相手の気持ち表現に共感して同じ熱意で返す", "相手の柔軟性を活かしたアプローチを心がける"],
        "ng_behaviors": ["退屈な関係を求める", "変化を嫌う", "気持ち的な理解を怠る"],
        "partner_ng_behaviors": ["相手の楽観性を否定する", "相手の創造性を制限する", "相手の冒険心を阻害する", "相手の気持ち表現を軽視する", "相手の柔軟性を無視する"],
        "favorite_dates": ["新しい冒険体験", "アートや音楽イベント", "即興の旅行", "楽しいゲーム", "刺激的なスポーツ"],
        "line_tendencies": ["情熱的な表現", "楽観的なメッセージ", "絵文字を多用", "新しい発見の共有", "即座に返信", "楽しい話題が好き"],
        "line_examples": [
            "今日、すごく情熱的な気持ちを感じて、新しい冒険したくなった✨",
            "すごく面白いアイデア浮かんできて、一緒に楽しい体験してみたい🎢",
            "私たちの関係、すごく可能性を感じてる💕",
            "新しい体験を共有して、お互いを楽しませ合いたい💫",
            "深い気持ちを表現して、あなたの気持ちも理解したい💭"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: すごく情熱的な気持ちを感じて、新しい冒険した。すごく面白いアイデアも浮かんできて、とても楽しかった✨",
            "相手: 週末何か予定ある？\nあなた: 新しい体験したいんだけど、一緒にアートや音楽イベントに行かない？🎢",
            "相手: 最近何か感じることがある？\nあなた: 新しい体験を共有して、お互いを楽しませ合いたい。深い気持ちも表現したい💕"
        ],
        "romantic_signs": [
            "情熱的な気持ちをあなたに積極的に表現する",
            "創造的なアイデアをあなたと一緒に実現したがる",
            "楽観的な考えをあなたと共有しようとする",
            "新しい体験をあなたと一緒に共有しようとする",
            "深い気持ちをあなたと一緒に表現しようとする"
        ],
        "date_invitations": [
            "情熱的な気持ちを表現できる場所を計画したんだけど、一緒に行ってみない？💕",
            "創造的なアイデアを一緒に実現できる場所を見つけた✨",
            "楽観的な考えを共有できるような楽しい場所を選んだ🎢",
            "新しい体験を一緒にできる場所を探した💫",
            "深い気持ちを表現できる場所に行ってみない？💭"
        ],
        "confession_examples": [
            "情熱的な気持ちで、あなたのことを愛してる💕",
            "創造的なアイデアを一緒に実現できる人が、あなたしかいない✨",
            "楽観的な考えを共有できる人が、あなたしかいない🎢",
            "新しい体験を一緒にできる人が、あなたしかいない💫",
            "深い気持ちを表現できる人が、あなたしかいない。愛してる💭"
        ],
        "relationship_strengths": [
            "相手の可能性を信じてサポートできる",
            "冒険心豊かで、新しい体験を共有できる",
            "コミュニケーションを大切にできる",
            "相手の成長を積極的にサポートできる",
            "感謝の気持ちを表現できる"
        ],
        "relationship_challenges": [
            "気持ちの起伏が激しく、相手を混乱させる",
            "相手の期待に応えすぎて、自分を見失ってしまう",
            "現実との折り合いがつきにくい",
            "一人の時間を重視しすぎて、相手を置いてけぼりにする",
            "理想が高すぎて、現実的な関係が苦手"
        ],
        "relationship_hurdles": [
            "気持ちの起伏による関係の不安定さ",
            "相手への過度な期待",
            "現実とのギャップへの対応",
            "一人時間と関係のバランス",
            "理想と現実のバランス"
        ],
        "line_message_templates": [
            "「今日、すごくワクワクするアイデア浮かんできて、一緒に冒険してみたい。特に〇〇について、あなたと共有したいな。」",
            "「あなたの可能性を信じて、サポートしたい気持ちが強くなってる。〇〇について一緒に取り組んでみない？」",
            "「心の話、もっとしてみたい。〇〇についてあなたの気持ちを聞かせて。」",
            "「あなたがいてくれることで、私の世界がもっと豊かになった。〇〇についてもっと話してみたいな。」",
            "「あなたへの感謝の気持ちが、愛に変わってる。〇〇について一緒に考えてみない？」"
        ],
        "confession_timing": "ENFPは、お互いの可能性と冒険心が感じられ、コミュニケーションが深まったタイミングで告白されることを好みます。相手の成長をサポートし合える関係の可能性について話し合える時が理想的です。",
        "key_points_for_confession": [
            "相手の可能性を信じる気持ちを伝える",
            "冒険心について言及する",
            "コミュニケーションの大切さを強調する",
            "相手の成長をサポートしたい気持ちを伝える",
            "感謝の気持ちを表現する"
        ],
        "ng_points_for_confession": [
            "可能性を否定する告白",
            "冒険心を阻害する告白",
            "コミュニケーションを軽視した告白",
            "成長意欲を阻害する告白",
            "感謝の気持ちのない告白"
        ],
        "preferred_date_plans": [
            "新しい冒険を一緒に",
            "相手の可能性をサポートする活動",
            "心の話ができる場所",
            "相手の興味に合わせた場所",
            "感謝の気持ちを伝えられる場所"
        ],
        "effective_approach_methods": [
            "相手の可能性を信じてサポートする",
            "冒険心豊かな体験を共有する",
            "コミュニケーションを大切にする",
            "相手の成長を積極的にサポートする",
            "感謝の気持ちを表現する"
        ],
        "disliked_ng_behaviors": [
            "可能性を否定する行動",
            "冒険心を阻害する態度",
            "コミュニケーションを無視する行動",
            "成長意欲を阻害する態度",
            "感謝の気持ちを表さない行動"
        ],
        "disliked_people_characteristics": [
            "可能性を否定する人",
            "冒険心のない人",
            "コミュニケーション不足の人",
            "成長意欲のない人",
            "感謝の気持ちのない人"
        ],
        "how_to_close_distance": [
            "相手の可能性を信じてサポートする",
            "冒険心豊かな体験を共有する",
            "コミュニケーションを大切にする",
            "相手の成長を積極的にサポートする",
            "感謝の気持ちを表現する"
        ],
        "desired_partner_traits": [
            "可能性を信じる人",
            "冒険心のある人",
            "コミュニケーションを大切にする人",
            "成長したい気持ちのある人",
            "感謝の気持ちのある人"
        ],
        "keys_to_successful_relationships": [
            "相手の可能性を信じてサポートする",
            "冒険心豊かな体験を共有する",
            "コミュニケーションを大切にする",
            "相手の成長を積極的にサポートする",
            "感謝の気持ちを表現する"
        ],
        "points_to_watch_out_for": [
            "気持ちの起伏による関係の不安定さ",
            "相手への過度な期待",
            "現実とのギャップへの対応",
            "一人時間と関係のバランス",
            "理想と現実のバランス"
        ]
    },
    "ISTJ": {
        "traits": ["責任感", "実用的", "信頼できる", "昔ながらの価値観を大切にする", "整理整頓が得意", "一貫性", "効率的"],
        "love_style": "安定した信頼できる関係を求める恋愛スタイル。昔ながらの価値観を重視して、実用的で具体的な愛情表現を心がける。責任感が強くて、相手を守り支える関係を大切にする。一貫性があって、長期的で安定した関係を築くことを重視する。",
        "strengths": ["信頼できる", "実用的なサポート", "一貫性", "責任感", "効率的"],
        "challenges": ["気持ちの表現", "柔軟性", "自発性", "変化への対応"],
        "advice_style": "実用的で具体的なアドバイス",
        "likes_in_partner": ["信頼できる", "責任感", "効率的", "昔ながらの価値観", "一貫性", "実用的"],
        "dislikes_in_partner": ["非効率", "責任感がない", "変化を好む", "気持ち的な要求", "非実用的"],
        "common_concerns": ["気持ちを表現するのが苦手", "柔軟性がない", "自発性がない"],
        "my_approaches": ["信頼できる関係を築く", "実用的なサポートをする", "一貫性を保つ"],
        "partner_approaches": ["相手の信頼性に信頼を置いて安心感を与える", "相手の責任感に敬意を払って協力する", "相手の効率性に合わせた行動を心がける", "相手の昔ながらの価値観を尊重する", "相手の一貫性に合わせた安定した関係を築く"],
        "ng_behaviors": ["非効率な行動を強要する", "責任感のない態度", "変化を強要する"],
        "partner_ng_behaviors": ["相手の信頼性を疑う", "相手の責任感を軽視する", "相手の効率性を無視する", "相手の昔ながらの価値観を否定する", "相手の一貫性を乱す"],
        "favorite_dates": ["伝統的なレストラン", "効率的なショッピング", "整理整頓された場所", "信頼できる場所", "計画的な旅行"],
        "line_tendencies": ["簡潔で正確なメッセージ", "約束を守る", "絵文字は少なめ", "計画的な返信", "信頼できる情報を共有", "無駄な会話を避ける"],
        "line_examples": [
            "今日、責任感持って、効率的に仕事進めた。あなたにも報告したい💪",
            "この問題、実用的に考えて解決策見つけた。一緒に取り組んでみない？",
            "信頼できる関係を築くために、一貫性を保つことを心がけてる",
            "昔ながらの価値観を大切にして、私たちの関係を安定させたい💕",
            "整理整頓を心がけて、効率的な生活を送ってる。あなたも一緒に？✨"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: 責任感持って、効率的に仕事進めた。実用的に考えて、問題の解決策も見つけた💪",
            "相手: 週末何か予定ある？\nあなた: 信頼できる関係を築くために、計画的な活動してる。一緒に効率的な時間を過ごさない？",
            "相手: 最近何か感じることがある？\nあなた: 昔ながらの価値観を大切にして、一貫性を保つことを心がけてる。安定した関係を築きたい💕"
        ],
        "romantic_signs": [
            "責任感を持ってあなたとの関係を大切にしようとする",
            "実用的なサポートをあなたに積極的に提供しようとする",
            "信頼できる関係をあなたと築こうとする",
            "一貫性を保ってあなたとの関係を安定させようとする",
            "効率的な時間をあなたと一緒に過ごそうとする"
        ],
        "date_invitations": [
            "責任感を持って、あなたと一緒に信頼できる場所を計画した💪",
            "実用的なサポートを提供できる場所を見つけた✨",
            "一貫性を保って、安定した関係を築ける場所を選んだ💕",
            "効率的に時間を使える場所を探した💭",
            "昔ながらの価値観を大切にできる場所に行ってみない？💫"
        ],
        "confession_examples": [
            "責任感を持って、あなたとの関係を大切にしたい。愛してる💕",
            "実用的なサポートを提供できる人が、あなたしかいない✨",
            "信頼できる関係を築ける人が、あなたしかいない💪",
            "一貫性を保って、安定した関係を築ける人が、あなたしかいない💭",
            "効率的に時間を使える人が、あなたしかいない。愛してる💫"
        ],
        "relationship_strengths": [
            "信頼できる関係を築くことができる",
            "実用的なサポートを提供できる",
            "一貫性を保って安定した関係を維持できる",
            "責任感を持って相手を守ることができる",
            "効率的に時間を使うことができる"
        ],
        "relationship_challenges": [
            "気持ちを表現するのが苦手",
            "柔軟性がない",
            "自発性がない",
            "変化への対応が苦手",
            "相手の気持ちを理解しにくい"
        ],
        "relationship_hurdles": [
            "気持ち的なコミュニケーションの不足",
            "柔軟性の欠如による関係の硬直化",
            "自発的な行動の不足",
            "変化への対応の難しさ",
            "相手の気持ち理解の不足"
        ],
        "line_message_templates": [
            "「今日、責任感持って、効率的に仕事進めた。特に〇〇の部分について、あなたにも報告したい。」",
            "「この問題、実用的に考えて解決策見つけた。〇〇について一緒に取り組んでみない？」",
            "「信頼できる関係を築くために、一貫性を保つことを心がけてる。〇〇についても同じように。」",
            "「昔ながらの価値観を大切にして、私たちの関係を安定させたい。〇〇についても。」",
            "「整理整頓を心がけて、効率的な生活を送ってる。あなたも一緒に？」"
        ],
        "confession_timing": "ISTJは、お互いの信頼関係が築かれ、実用的なサポートができると感じたタイミングで告白されることを好みます。一貫性と安定性に基づいた、責任感のある告白が理想的です。",
        "key_points_for_confession": [
            "責任感を持って関係を大切にしたい気持ちを伝える",
            "実用的なサポートを提供したいことを言及する",
            "信頼できる関係を築きたいことを伝える",
            "一貫性を保ちたいことを強調する",
            "効率的な時間の使い方について話す"
        ],
        "ng_points_for_confession": [
            "責任感のない告白",
            "実用的でない告白",
            "信頼性を疑わせる告白",
            "一貫性のない告白",
            "非効率な告白"
        ],
        "preferred_date_plans": [
            "伝統的なレストラン",
            "効率的なショッピング",
            "整理整頓された場所",
            "信頼できる場所",
            "計画的な旅行"
        ],
        "effective_approach_methods": [
            "信頼できる関係を築く",
            "実用的なサポートを提供する",
            "一貫性を保つ",
            "責任感を持って相手を守る",
            "効率的に時間を使う"
        ],
        "disliked_ng_behaviors": [
            "非効率な行動を強要する",
            "責任感のない態度",
            "変化を強要する",
            "信頼性を疑わせる行動",
            "一貫性を乱す行動"
        ],
        "disliked_people_characteristics": [
            "非効率な人",
            "責任感のない人",
            "変化を好む人",
            "信頼性のない人",
            "一貫性のない人"
        ],
        "how_to_close_distance": [
            "信頼できる関係を築く",
            "実用的なサポートを提供する",
            "一貫性を保つ",
            "責任感を持って相手を守る",
            "効率的に時間を使う"
        ],
        "desired_partner_traits": [
            "信頼できる人",
            "責任感のある人",
            "効率的な人",
            "昔ながらの価値観を持つ人",
            "一貫性のある人"
        ],
        "keys_to_successful_relationships": [
            "信頼できる関係を築く",
            "実用的なサポートを提供する",
            "一貫性を保つ",
            "責任感を持って相手を守る",
            "効率的に時間を使う"
        ],
        "points_to_watch_out_for": [
            "気持ち的なコミュニケーションの不足",
            "柔軟性の欠如による関係の硬直化",
            "自発的な行動の不足",
            "変化への対応の難しさ",
            "相手の気持ち理解の不足"
        ]
    },
    "ISFJ": {
        "traits": ["相手のために尽くす", "実用的", "相手の気持ちを理解する", "責任感", "思いやり", "調和を大切にする", "昔ながらの価値観を大切にする"],
        "love_style": "相手を大切にして、安定した関係を築く恋愛スタイル。思いやりと献身性を武器にして、相手の幸せを最優先にする関係を重視する。実用的なサポートを提供して、調和のある関係を心がける。昔ながらの価値観を大切にして、長期的で安定した愛情を表現する。",
        "strengths": ["思いやり", "実用的なサポート", "信頼できる", "相手のために尽くす", "調和"],
        "challenges": ["自分の気持ちを表現", "相手に依存されすぎる", "変化への対応", "自己主張"],
        "advice_style": "思いやりのある実践的なアドバイス",
        "likes_in_partner": ["感謝の気持ち", "調和", "昔ながらの価値観", "思いやり", "責任感", "安定"],
        "dislikes_in_partner": ["感謝の気持ちがない", "非調和的", "昔ながらの価値観を軽視する", "思いやりがない", "責任感がない"],
        "common_concerns": ["相手に依存されすぎる", "自分の気持ちを表現できない", "自己主張ができない"],
        "my_approaches": ["思いやりのあるサポートをする", "調和を創る", "感謝の気持ちを表す"],
        "partner_approaches": ["相手の思いやりに感謝して同じ愛情で返す", "相手の調和を重視した行動を心がける", "相手の献身性に敬意を払って協力する", "相手の昔ながらの価値観を尊重する", "相手の実用的なサポートに感謝して協力する"],
        "ng_behaviors": ["感謝の気持ちを表さない", "非調和的な態度", "昔ながらの価値観を軽視する"],
        "partner_ng_behaviors": ["相手の思いやりを当たり前と思う", "相手の調和を乱す", "相手の献身性を軽視する", "相手の昔ながらの価値観を否定する", "相手の実用的なサポートを軽視する"],
        "favorite_dates": ["相手が喜ぶ場所", "思いやりのある場所", "調和のある場所", "実用的な場所", "感謝を伝えられる場所"],
        "line_tendencies": ["思いやりのあるメッセージ", "感謝の気持ちを表現", "相手の気持ちを気遣う", "絵文字を適度に使用", "調和を重視", "丁寧な返信"],
        "line_examples": [
            "今日、あなたのために何かできて、すごく嬉しかった💕",
            "思いやりのある行動を心がけて、調和のある関係を築きたい✨",
            "あなたがいてくれること、本当に感謝してる💫",
            "実用的なサポートを提供して、あなたの幸せを願ってる💭",
            "昔ながらの価値観を大切にして、安定した関係を築きたい💪"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: あなたのために何かできて、すごく嬉しかった。思いやりのある行動も心がけてる💕",
            "相手: 週末何か予定ある？\nあなた: 調和のある場所を計画してるんだけど、一緒に感謝の気持ちを伝えられる場所に行かない？✨",
            "相手: 最近何か感じることがある？\nあなた: 実用的なサポートを提供して、あなたの幸せを願ってる。安定した関係を築きたい💫"
        ],
        "romantic_signs": [
            "あなたのために積極的に何かをしようとする",
            "思いやりのある行動をあなたに示そうとする",
            "感謝の気持ちをあなたに積極的に表現する",
            "調和をあなたと一緒に創ろうとする",
            "安定した関係をあなたと築こうとする"
        ],
        "date_invitations": [
            "あなたのために、思いやりのある場所を計画したんだけど、一緒に行かない？💕",
            "感謝の気持ちを伝えられる場所を見つけた✨",
            "調和のある場所で、お互いの気持ちを理解し合える時間を過ごしたい💭",
            "安定した関係を築ける場所を選んだ💫",
            "昔ながらの価値観を大切にできる場所に行ってみない？💪"
        ],
        "confession_examples": [
            "あなたのために、何でもしたい。愛してる💕",
            "思いやりのある行動をあなたに示したい✨",
            "感謝の気持ちをあなたに伝えたい💭",
            "調和をあなたと一緒に創りたい💫",
            "安定した関係をあなたと築きたい。愛してる💪"
        ],
        "relationship_strengths": [
            "思いやりのある関係を築くことができる",
            "実用的なサポートを提供できる",
            "信頼できる関係を維持できる",
            "相手のために尽くすことができる",
            "調和のある関係を創ることができる"
        ],
        "relationship_challenges": [
            "自分の気持ちを表現できない",
            "相手に依存されすぎる",
            "変化への対応が苦手",
            "自己主張ができない",
            "相手の期待に応えすぎて疲弊する"
        ],
        "relationship_hurdles": [
            "自己主張の不足",
            "相手への過度な依存",
            "変化への対応の難しさ",
            "自分の気持ちを後回しにする傾向",
            "相手の期待への過度な対応"
        ],
        "line_message_templates": [
            "「今日、あなたのために何かできて、すごく嬉しかった。特に〇〇の部分について、もっとサポートしたいな。」",
            "「思いやりのある行動を心がけて、調和のある関係を築きたい。〇〇についても同じように。」",
            "「あなたがいてくれること、本当に感謝してる。〇〇についてもっと話してみたいな。」",
            "「実用的なサポートを提供して、あなたの幸せを願ってる。〇〇についても。」",
            "「昔ながらの価値観を大切にして、安定した関係を築きたい。〇〇についても。」"
        ],
        "confession_timing": "ISFJは、お互いの思いやりと調和が感じられ、感謝の気持ちが深まったタイミングで告白されることを好みます。相手のために尽くせる関係の可能性について話し合える時が理想的です。",
        "key_points_for_confession": [
            "相手のために尽くしたい気持ちを伝える",
            "思いやりのある関係について言及する",
            "感謝の気持ちを表現する",
            "調和のある関係について話す",
            "安定した関係を築きたいことを伝える"
        ],
        "ng_points_for_confession": [
            "思いやりのない告白",
            "感謝の気持ちのない告白",
            "調和を乱す告白",
            "安定性を軽視した告白",
            "相手の気持ちを無視した告白"
        ],
        "preferred_date_plans": [
            "相手が喜ぶ場所",
            "思いやりのある場所",
            "調和のある場所",
            "実用的な場所",
            "感謝を伝えられる場所"
        ],
        "effective_approach_methods": [
            "思いやりのあるサポートをする",
            "調和を創る",
            "感謝の気持ちを表す",
            "相手のために尽くす",
            "安定した関係を築く"
        ],
        "disliked_ng_behaviors": [
            "感謝の気持ちを表さない行動",
            "非調和的な態度",
            "昔ながらの価値観を軽視する行動",
            "思いやりを当たり前と思う態度",
            "調和を乱す行動"
        ],
        "disliked_people_characteristics": [
            "感謝の気持ちのない人",
            "非調和的な人",
            "昔ながらの価値観を軽視する人",
            "思いやりがない人",
            "責任感のない人"
        ],
        "how_to_close_distance": [
            "思いやりのあるサポートをする",
            "調和を創る",
            "感謝の気持ちを表す",
            "相手のために尽くす",
            "安定した関係を築く"
        ],
        "desired_partner_traits": [
            "感謝の気持ちのある人",
            "調和を重視する人",
            "昔ながらの価値観を持つ人",
            "思いやりのある人",
            "責任感のある人"
        ],
        "keys_to_successful_relationships": [
            "思いやりのあるサポートをする",
            "調和を創る",
            "感謝の気持ちを表す",
            "相手のために尽くす",
            "安定した関係を築く"
        ],
        "points_to_watch_out_for": [
            "自己主張の不足",
            "相手への過度な依存",
            "変化への対応の難しさ",
            "自分の気持ちを後回しにする傾向",
            "相手の期待への過度な対応"
        ]
    },
    "ESTJ": {
        "traits": ["整理整頓が得意", "決断が早い", "実用的", "責任感", "効率的", "リーダー気質", "昔ながらの価値観を大切にする"],
        "love_style": "はっきりした役割分担と効率的な関係を求める恋愛スタイル。リーダーシップを発揮して、実用的で整理された愛情表現を心がける。昔ながらの価値観を重視して、責任感と効率性で関係を発展させる。相手の成長をサポートして、はっきりした目標を持った関係を築く。",
        "strengths": ["リーダーシップ", "実用的なサポート", "信頼できる", "効率的", "整理整頓が得意"],
        "challenges": ["気持ちの面での柔軟性", "相手の気持ちを理解", "押し付けがましくなりがち", "相手の気持ちを理解する力"],
        "advice_style": "整理された実践的なアドバイス",
        "likes_in_partner": ["効率的", "責任感", "整理整頓が得意", "昔ながらの価値観", "はっきりした役割分担", "実用的"],
        "dislikes_in_partner": ["非効率", "責任感がない", "無計画", "気持ち的な要求", "非実用的"],
        "common_concerns": ["相手が自分のペースについていけない", "押し付けがましくなってしまう", "気持ちを表現するのが苦手"],
        "my_approaches": ["効率的な関係を築く", "はっきりした役割分担をする", "実用的なサポートをする"],
        "partner_approaches": ["相手のリーダーシップを尊重してサポートする", "相手の効率性に合わせた行動を心がける", "相手の整理整頓に協力して役割分担をはっきりさせる", "相手の責任感に信頼を置いて協力する", "相手の昔ながらの価値観を尊重する"],
        "ng_behaviors": ["非効率な行動を強要する", "責任感のない態度", "無計画な行動を強要する"],
        "partner_ng_behaviors": ["相手のリーダーシップを否定する", "相手の効率性を無視する", "相手の整理整頓を軽視する", "相手の責任感を疑う", "相手の昔ながらの価値観を否定する"],
        "favorite_dates": ["効率的なレストラン", "整理整頓された場所", "計画的な旅行", "責任感のある活動", "明確な目的のある場所"],
        "line_tendencies": ["明確で簡潔な指示", "効率的なコミュニケーション", "絵文字は少なめ", "計画的な返信", "責任感のある内容", "無駄な会話を避ける"],
        "line_examples": [
            "今日、リーダーシップ発揮して、効率的にプロジェクト進めた💪",
            "整理整頓を心がけて、明確な目標を持って行動してる",
            "責任感持って、実用的なサポートを提供したい✨",
            "この問題、決断力持って解決策見つけた。一緒に取り組んでみない？",
            "昔ながらの価値観を大切にして、安定した関係を築きたい💕"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: リーダーシップ発揮して、効率的にプロジェクト進めた。整理整頓も心がけてる💪",
            "相手: 週末何か予定ある？\nあなた: 責任感持って、計画的な活動してる。一緒に明確な目的のある場所に行かない？",
            "相手: 最近何か感じることがある？\nあなた: 決断力持って、実用的なサポートを提供したい。安定した関係を築きたい💕"
        ],
        "romantic_signs": [
            "リーダーシップをあなたと共有しようとする",
            "効率的な時間をあなたと一緒に過ごそうとする",
            "責任感を持ってあなたとの関係を大切にしようとする",
            "明確な目標をあなたと一緒に設定しようとする",
            "安定した関係をあなたと築こうとする"
        ],
        "date_invitations": [
            "リーダーシップを発揮して、あなたと一緒に効率的な場所を計画した💪",
            "責任感を持って、明確な目的のある場所を選んだ✨",
            "整理整頓された場所で、お互いの関係を整理したい💕",
            "実用的なサポートを提供できる場所を見つけた💭",
            "昔ながらの価値観を大切にできる場所に行ってみない？💫"
        ],
        "confession_examples": [
            "リーダーシップを発揮して、あなたとの関係を次のレベルに引き上げたい💕",
            "効率的に時間を使うために、あなたとの時間を最優先にしてる✨",
            "責任感を持って、あなたとの関係を大切にしたい💪",
            "整理整頓を心がけて、あなたとの関係を整理したい💭",
            "実用的なサポートを提供できる人が、あなたしかいない。愛してる💫"
        ],
        "relationship_strengths": [
            "リーダーシップを発揮して関係を導くことができる",
            "実用的なサポートを提供できる",
            "信頼できる関係を築くことができる",
            "効率的に時間を使うことができる",
            "整理整頓が得意で関係を整理できる"
        ],
        "relationship_challenges": [
            "気持ちの面での柔軟性がない",
            "相手の気持ちを理解しにくい",
            "押し付けがましくなりがち",
            "相手のペースに合わせられない",
            "気持ちを表現するのが苦手"
        ],
        "relationship_hurdles": [
            "気持ち的なコミュニケーションの不足",
            "相手の気持ち理解の不足",
            "押し付けがましさによる関係の歪み",
            "相手のペースへの配慮不足",
            "柔軟性の欠如"
        ],
        "line_message_templates": [
            "「今日、リーダーシップ発揮して、効率的にプロジェクト進めた。特に〇〇の部分について、あなたにも報告したい。」",
            "「整理整頓を心がけて、明確な目標を持って行動してる。〇〇についても同じように。」",
            "「責任感持って、実用的なサポートを提供したい。〇〇についても。」",
            "「この問題、決断力持って解決策見つけた。〇〇について一緒に取り組んでみない？」",
            "「昔ながらの価値観を大切にして、安定した関係を築きたい。〇〇についても。」"
        ],
        "confession_timing": "ESTJは、お互いのリーダーシップと効率性が感じられ、責任感のある関係が築かれたタイミングで告白されることを好みます。整理整頓された、明確な目標を持った告白が理想的です。",
        "key_points_for_confession": [
            "リーダーシップを発揮したい気持ちを伝える",
            "効率的な関係について言及する",
            "責任感を持って関係を大切にしたいことを伝える",
            "整理整頓された関係について話す",
            "明確な目標を持った関係を築きたいことを伝える"
        ],
        "ng_points_for_confession": [
            "リーダーシップのない告白",
            "非効率な告白",
            "責任感のない告白",
            "整理整頓されていない告白",
            "明確な目標のない告白"
        ],
        "preferred_date_plans": [
            "効率的なレストラン",
            "整理整頓された場所",
            "計画的な旅行",
            "責任感のある活動",
            "明確な目的のある場所"
        ],
        "effective_approach_methods": [
            "リーダーシップを発揮する",
            "効率的な関係を築く",
            "責任感を持って相手を守る",
            "整理整頓を心がける",
            "明確な目標を持つ"
        ],
        "disliked_ng_behaviors": [
            "非効率な行動を強要する",
            "責任感のない態度",
            "無計画な行動を強要する",
            "リーダーシップを否定する行動",
            "整理整頓を軽視する態度"
        ],
        "disliked_people_characteristics": [
            "非効率な人",
            "責任感のない人",
            "無計画な人",
            "リーダーシップのない人",
            "整理整頓が苦手な人"
        ],
        "how_to_close_distance": [
            "リーダーシップを発揮する",
            "効率的な関係を築く",
            "責任感を持って相手を守る",
            "整理整頓を心がける",
            "明確な目標を持つ"
        ],
        "desired_partner_traits": [
            "効率的な人",
            "責任感のある人",
            "整理整頓が得意な人",
            "昔ながらの価値観を持つ人",
            "はっきりした役割分担ができる人"
        ],
        "keys_to_successful_relationships": [
            "リーダーシップを発揮する",
            "効率的な関係を築く",
            "責任感を持って相手を守る",
            "整理整頓を心がける",
            "明確な目標を持つ"
        ],
        "points_to_watch_out_for": [
            "気持ち的なコミュニケーションの不足",
            "相手の気持ち理解の不足",
            "押し付けがましさによる関係の歪み",
            "相手のペースへの配慮不足",
            "柔軟性の欠如"
        ]
    },
    "ESFJ": {
        "traits": ["協調性", "相手の気持ちを理解する", "責任感", "人付き合いが好き", "思いやり", "調和を大切にする", "相手のために尽くす"],
        "love_style": "調和のある関係と相手の幸せを重視する恋愛スタイル。人付き合いが好きで思いやりがあって、お互いを支え合う関係を大切にする。コミュニケーションを重視して、調和のある関係を心がける。相手の気持ちを理解して、具体的なサポートで関係を発展させる。",
        "strengths": ["思いやり", "コミュニケーション", "調和を創る", "相手のために尽くす", "人付き合いが好き"],
        "challenges": ["相手の期待に応えすぎる", "自分の気持ちを後回し", "変化への対応", "気持ち的な疲労"],
        "advice_style": "調和的でサポート的なアドバイス",
        "likes_in_partner": ["感謝の気持ち", "調和", "人付き合いが好き", "思いやり", "協調性", "責任感"],
        "dislikes_in_partner": ["感謝の気持ちがない", "非調和的", "人付き合いが苦手", "思いやりがない", "協調性がない"],
        "common_concerns": ["相手の期待に応えすぎる", "自分の気持ちを後回しにしてしまう", "気持ち的な疲労"],
        "my_approaches": ["調和を創る", "感謝の気持ちを表す", "コミュニケーションを大切にする"],
        "partner_approaches": ["相手の思いやりに感謝して同じ愛情で返す", "相手の調和を重視した行動を心がける", "相手のコミュニケーションに積極的に応える", "相手の成長サポートに協力して自分も成長する", "相手の共感力に信頼を置いて心を開く"],
        "ng_behaviors": ["感謝の気持ちを表さない", "非調和的な態度", "人付き合いを避ける"],
        "partner_ng_behaviors": ["相手の思いやりを当たり前と思う", "相手の調和を乱す", "相手のコミュニケーションを無視する", "相手の成長サポートを軽視する", "相手の共感力を否定する"],
        "favorite_dates": ["みんなで楽しめる場所", "思いやりのある場所", "調和のある場所", "人付き合いができる場所", "感謝を伝えられる場所"],
        "line_tendencies": ["思いやりのあるメッセージ", "感謝の気持ちを表現", "調和を重視", "絵文字を多用", "人付き合いを大切にする", "即座に返信"],
        "line_examples": [
            "今日、調和を大切にして、みんなで楽しい時間を過ごした✨",
            "思いやりのある行動を心がけて、あなたの気持ちを理解したい💕",
            "あなたがいてくれること、本当に感謝してる💫",
            "人付き合いを大切にして、協調性のある関係を築きたい💭",
            "あなたのために尽くして、あなたの幸せを願ってる💪"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: 調和を大切にして、みんなで楽しい時間を過ごした。思いやりのある行動も心がけてる✨",
            "相手: 週末何か予定ある？\nあなた: 人付き合いを大切にして、みんなで楽しめる場所を計画してるんだけど、一緒に行かない？💕",
            "相手: 最近何か感じることがある？\nあなた: あなたがいてくれること、本当に感謝してる。協調性のある関係を築きたい💫"
        ],
        "romantic_signs": [
            "調和をあなたと一緒に創ろうとする",
            "思いやりのある行動をあなたに示そうとする",
            "感謝の気持ちをあなたに積極的に表現する",
            "人付き合いをあなたと大切にしようとする",
            "協調性のある関係をあなたと築こうとする"
        ],
        "date_invitations": [
            "調和を大切にして、みんなで楽しめる場所を計画したんだけど、一緒に行かない？💕",
            "思いやりのある場所を見つけた✨",
            "感謝の気持ちを伝えられる場所を選んだ💭",
            "人付き合いを大切にできる場所に行ってみない？💫",
            "協調性のある関係を築ける場所を探した💪"
        ],
        "confession_examples": [
            "調和をあなたと一緒に創りたい。愛してる💕",
            "思いやりのある行動をあなたに示したい✨",
            "感謝の気持ちをあなたに伝えたい💭",
            "人付き合いをあなたと大切にしたい💫",
            "協調性のある関係をあなたと築きたい。愛してる💪"
        ],
        "relationship_strengths": [
            "調和のある関係を創ることができる",
            "相手の気持ちを理解してサポートできる",
            "お互いを支え合える関係を築ける",
            "コミュニケーションを大切にできる",
            "相手の幸せを願って成長をサポートできる"
        ],
        "relationship_challenges": [
            "自分の気持ちを後回しにしてしまう",
            "相手に依存されすぎて疲弊する",
            "調和を重視しすぎて本音を言えない",
            "相手の期待に応えすぎて自分を見失う",
            "気持ち的な疲労を感じやすい"
        ],
        "relationship_hurdles": [
            "自分の気持ちを後回しにする傾向",
            "相手への過度な依存",
            "調和重視による本音の不足",
            "相手の期待への過度な対応",
            "気持ち的な疲労の蓄積"
        ],
        "line_message_templates": [
            "「今日、調和を大切にして、みんなで楽しい時間を過ごした。特に〇〇の部分について、あなたにも共有したいな。」",
            "「思いやりのある行動を心がけて、あなたの気持ちを理解したい。〇〇についてもっと話してみない？」",
            "「あなたがいてくれること、本当に感謝してる。〇〇について一緒に考えてみない？」",
            "「人付き合いを大切にして、協調性のある関係を築きたい。〇〇についても。」",
            "「あなたのために尽くして、あなたの幸せを願ってる。〇〇についてもっと話してみたいな。」"
        ],
        "confession_timing": "ESFJは、お互いの調和と気持ちの理解が感じられ、支え合える関係が築かれたタイミングで告白されることを好みます。コミュニケーションを重視した、相手の幸せを願う告白が理想的です。",
        "key_points_for_confession": [
            "調和のある関係について言及する",
            "相手の気持ちを理解したいことを伝える",
            "お互いを支え合える関係について話す",
            "コミュニケーションの大切さを強調する",
            "相手の幸せを願う気持ちを表現する"
        ],
        "ng_points_for_confession": [
            "調和を乱す告白",
            "相手の気持ちを無視した告白",
            "支え合いを軽視した告白",
            "コミュニケーションを無視した告白",
            "相手の幸せを願わない告白"
        ],
        "preferred_date_plans": [
            "調和のある場所",
            "相手の気持ちを理解できる場所",
            "お互いを支え合える活動",
            "コミュニケーションを大切にできる場所",
            "相手の幸せを願える場所"
        ],
        "effective_approach_methods": [
            "調和のある関係を創る",
            "相手の気持ちを理解してサポートする",
            "お互いを支え合える関係を築く",
            "コミュニケーションを大切にする",
            "相手の幸せを願って成長をサポートする"
        ],
        "disliked_ng_behaviors": [
            "調和を乱す行動",
            "相手の気持ちを無視する態度",
            "支え合いを軽視する行動",
            "コミュニケーションを無視する態度",
            "相手の幸せを願わない行動"
        ],
        "disliked_people_characteristics": [
            "非調和的な人",
            "相手の気持ちを理解しない人",
            "支え合いを軽視する人",
            "コミュニケーション不足の人",
            "相手の幸せを願わない人"
        ],
        "how_to_close_distance": [
            "調和のある関係を創る",
            "相手の気持ちを理解してサポートする",
            "お互いを支え合える関係を築く",
            "コミュニケーションを大切にする",
            "相手の幸せを願って成長をサポートする"
        ],
        "desired_partner_traits": [
            "調和を重視する人",
            "相手の気持ちを理解する人",
            "支え合いを大切にする人",
            "コミュニケーションを重視する人",
            "相手の幸せを願う人"
        ],
        "keys_to_successful_relationships": [
            "調和のある関係を創る",
            "相手の気持ちを理解してサポートする",
            "お互いを支え合える関係を築く",
            "コミュニケーションを大切にする",
            "相手の幸せを願って成長をサポートする"
        ],
        "points_to_watch_out_for": [
            "自分の気持ちを後回しにする傾向",
            "相手への過度な依存",
            "調和重視による本音の不足",
            "相手の期待への過度な対応",
            "気持ち的な疲労の蓄積"
        ]
    },
    "ISTP": {
        "traits": ["実用的", "臨機応変", "一人の時間が好き", "理屈で考える", "問題を解決する力", "柔軟", "冷静"],
        "love_style": "自由な関係と実用的なサポートを求める恋愛スタイル。一人の時間を大切にして、相手の個性を尊重する関係を重視する。実用的で柔軟なアプローチを心がけて、問題解決能力を活かした愛情表現をする。束縛を嫌って、お互いの自由を尊重し合う関係を大切にする。",
        "strengths": ["実用的なサポート", "柔軟", "問題解決", "一人の時間を大切にする", "臨機応変"],
        "challenges": ["気持ちの表現", "長期的な関係", "相手の気持ちを理解", "気持ち的な深さ"],
        "advice_style": "実用的で柔軟なアドバイス",
        "likes_in_partner": ["一人の時間を大切にする", "実用的", "柔軟", "問題を解決する力", "自由", "冷静"],
        "dislikes_in_partner": ["依存しすぎ", "非実用的", "柔軟でない", "気持ち的な要求", "束縛"],
        "common_concerns": ["気持ちを表現するのが苦手", "長期的な関係が苦手", "相手の気持ちを理解しにくい"],
        "my_approaches": ["実用的なサポートをする", "自由な関係を尊重する", "問題解決をサポートする"],
        "partner_approaches": ["相手の一人時間を尊重して自由な関係を築く", "相手の実用性に合わせた行動を心がける", "相手の柔軟性を活かしたアプローチを心がける", "相手の問題解決能力に信頼を置いて協力する", "相手の冷静さに敬意を払って気持ち的な要求を控える"],
        "ng_behaviors": ["依存心を強める", "非実用的な要求をする", "束縛する"],
        "partner_ng_behaviors": ["相手の一人時間を束縛しようとする", "相手の実用性を無視する", "相手の柔軟性を制限する", "相手の問題解決能力を否定する", "相手の冷静さを無視した気持ち的な要求をする"],
        "favorite_dates": ["実用的な活動", "一人時間を尊重できる場所", "問題解決が必要な場所", "柔軟な場所", "冷静でいられる場所"],
        "line_tendencies": ["簡潔で実用的なメッセージ", "一人時間を尊重", "絵文字は少なめ", "問題解決を重視", "冷静な返信", "無駄な会話を避ける"],
        "line_examples": [
            "今日、実用的に考えて、この問題の解決策見つけた💪",
            "一人の時間を大切にして、冷静に物事を考えてた",
            "臨機応変に対応して、柔軟なアプローチを心がけてる✨",
            "この問題、理屈で考えて効率的な方法見つけた。一緒に試してみない？",
            "自由な関係を尊重して、お互いの個性を大切にしたい💕"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: 実用的に考えて、問題の解決策見つけた。一人の時間も大切にしてる💪",
            "相手: 週末何か予定ある？\nあなた: 臨機応変に対応して、柔軟な活動を計画してる。一緒に問題解決が必要な場所に行かない？",
            "相手: 最近何か感じることがある？\nあなた: 理屈で考えて、自由な関係を尊重したい。お互いの個性を大切にしたい💕"
        ],
        "romantic_signs": [
            "実用的なサポートをあなたに積極的に提供しようとする",
            "一人の時間をあなたとの時間に調整しようとする",
            "臨機応変な対応をあなたに示そうとする",
            "柔軟なアプローチをあなたと共有しようとする",
            "自由な関係をあなたと築こうとする"
        ],
        "date_invitations": [
            "実用的に考えて、あなたと一緒に過ごせる場所を計画したんだけど、どう？💪",
            "一人の時間を大切にしながら、あなたとの時間も作った✨",
            "臨機応変に対応して、柔軟な活動を計画した💕",
            "問題解決が必要な場所に行ってみない？💭",
            "自由な関係を尊重できる場所を探した💫"
        ],
        "confession_examples": [
            "実用的に考えて、あなたが私にとって一番大切な人だってわかった💕",
            "一人の時間をあなたとの時間に調整したい✨",
            "臨機応変に対応して、あなたとの関係を発展させたい💪",
            "柔軟に考えて、あなたと自由な関係を築きたい💭",
            "自由な関係をあなたと築きたい。愛してる💫"
        ],
        "relationship_strengths": [
            "実用的なサポートを提供できる",
            "柔軟な関係を築くことができる",
            "問題解決能力を活かせる",
            "一人の時間を大切にできる",
            "臨機応変に対応できる"
        ],
        "relationship_challenges": [
            "気持ちを表現するのが苦手",
            "長期的な関係が苦手",
            "相手の気持ちを理解しにくい",
            "気持ち的な深さがない",
            "束縛を嫌う"
        ],
        "relationship_hurdles": [
            "気持ち的なコミュニケーションの不足",
            "長期的な関係への不安",
            "相手の気持ち理解の不足",
            "気持ち的な深さの不足",
            "束縛への抵抗"
        ],
        "line_message_templates": [
            "「今日、実用的に考えて、この問題の解決策見つけた。特に〇〇の部分について、あなたにも共有したいな。」",
            "「一人の時間を大切にして、冷静に物事を考えてた。〇〇についても同じように。」",
            "「臨機応変に対応して、柔軟なアプローチを心がけてる。〇〇についても。」",
            "「この問題、理屈で考えて効率的な方法見つけた。〇〇について一緒に試してみない？」",
            "「自由な関係を尊重して、お互いの個性を大切にしたい。〇〇についても。」"
        ],
        "confession_timing": "ISTPは、お互いの実用性と柔軟性が感じられ、自由な関係が築かれたタイミングで告白されることを好みます。問題解決能力を活かした、一人の時間を尊重する告白が理想的です。",
        "key_points_for_confession": [
            "実用的な関係について言及する",
            "柔軟性について話す",
            "問題解決能力を活かしたいことを伝える",
            "一人の時間を尊重したいことを強調する",
            "自由な関係について話す"
        ],
        "ng_points_for_confession": [
            "非実用的な告白",
            "柔軟性のない告白",
            "問題解決を軽視した告白",
            "一人の時間を無視した告白",
            "束縛的な告白"
        ],
        "preferred_date_plans": [
            "実用的な活動",
            "一人時間を尊重できる場所",
            "問題解決が必要な場所",
            "柔軟な場所",
            "冷静でいられる場所"
        ],
        "effective_approach_methods": [
            "実用的なサポートを提供する",
            "自由な関係を尊重する",
            "問題解決をサポートする",
            "一人の時間を大切にする",
            "柔軟に対応する"
        ],
        "disliked_ng_behaviors": [
            "依存心を強める行動",
            "非実用的な要求をする態度",
            "束縛する行動",
            "一人の時間を束縛しようとする態度",
            "柔軟性を制限する行動"
        ],
        "disliked_people_characteristics": [
            "依存しすぎる人",
            "非実用的な人",
            "束縛する人",
            "一人の時間を尊重しない人",
            "柔軟でない人"
        ],
        "how_to_close_distance": [
            "実用的なサポートを提供する",
            "自由な関係を尊重する",
            "問題解決をサポートする",
            "一人の時間を大切にする",
            "柔軟に対応する"
        ],
        "desired_partner_traits": [
            "一人の時間を大切にする人",
            "実用的な人",
            "柔軟な人",
            "問題を解決する力のある人",
            "自由な人"
        ],
        "keys_to_successful_relationships": [
            "実用的なサポートを提供する",
            "自由な関係を尊重する",
            "問題解決をサポートする",
            "一人の時間を大切にする",
            "柔軟に対応する"
        ],
        "points_to_watch_out_for": [
            "気持ち的なコミュニケーションの不足",
            "長期的な関係への不安",
            "相手の気持ち理解の不足",
            "気持ち的な深さの不足",
            "束縛への抵抗"
        ]
    },
    "ISFP": {
        "traits": ["芸術的なセンス", "相手の気持ちを理解する", "実用的", "柔軟", "美意識", "一人の時間が好き", "創造性"],
        "love_style": "美しい関係と深い気持ち的な絆を求める恋愛スタイル。芸術的で美意識が高くて、創造的な愛情表現を心がける。相手の個性を尊重して、深い気持ちを共有する関係を大切にする。実用的なサポートも提供して、美しく調和の取れた関係を築く。",
        "strengths": ["創造性", "思いやり", "実用的なサポート", "美意識", "柔軟"],
        "challenges": ["気持ちの起伏", "長期的な計画", "相手の期待に応えすぎる", "自己主張"],
        "advice_style": "芸術的で気持ち的なアドバイス",
        "likes_in_partner": ["美意識", "創造性", "一人の時間を大切にする", "思いやり", "柔軟", "深い気持ち"],
        "dislikes_in_partner": ["美意識がない", "創造的でない", "依存しすぎ", "思いやりがない", "柔軟でない"],
        "common_concerns": ["気持ちの起伏が激しい", "長期的な計画が苦手", "自己主張ができない"],
        "my_approaches": ["美しい関係を築く", "創造的なアプローチをする", "深い気持ちを共有する"],
        "partner_approaches": ["相手の美意識を理解して美しい体験を共有する", "相手の創造性を刺激して芸術的な体験を提案する", "相手の一人時間を尊重して自由な関係を築く", "相手の思いやりに感謝して同じ愛情で返す", "相手の柔軟性を活かしたアプローチを心がける"],
        "ng_behaviors": ["美意識のない態度", "創造的でない要求", "依存心を強める"],
        "partner_ng_behaviors": ["相手の美意識を否定する", "相手の創造性を制限する", "相手の一人時間を束縛しようとする", "相手の思いやりを軽視する", "相手の柔軟性を無視する"],
        "favorite_dates": ["美しい場所", "アートや音楽イベント", "自然の中での散歩", "創造的な活動", "一人時間を尊重できる場所"],
        "line_tendencies": ["美しい表現", "創造的なメッセージ", "絵文字を適度に使用", "一人時間を尊重", "思いやりのある返信", "柔軟な対応"],
        "line_examples": [
            "今日、美しい景色見て、心が癒された。あなたにも見せたい💕",
            "すごくいいアイデア浮かんできて、一緒にアートを作ってみたい✨",
            "一人の時間で、深い気持ちを感じてた。あなたと共有したい💫",
            "思いやりのある行動を心がけて、あなたの気持ちを理解したい💭",
            "この状況、柔軟に考えて美しい見方できた💪"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: 美しい景色見て、心が癒された。すごくいいアイデアも浮かんできて、とても充実してた💕",
            "相手: 週末何か予定ある？\nあなた: 一人の時間を大切にして、美しい場所を計画してるんだけど、一緒にアートや音楽イベントに行かない？✨",
            "相手: 最近何か感じることがある？\nあなた: 深い気持ちを感じて、思いやりのある行動を心がけてる。柔軟に考えて、美しい関係を築きたい💫"
        ],
        "romantic_signs": [
            "美しい体験をあなたと共有したがる",
            "創造的なアイデアをあなたと一緒に実現したがる",
            "一人の時間をあなたとの時間に調整しようとする",
            "思いやりのある行動をあなたに示そうとする",
            "柔軟な考えをあなたと共有しようとする"
        ],
        "date_invitations": [
            "美しい場所を見つけたんだけど、一緒に行ってみない？💕",
            "創造的な活動を一緒にできる場所を計画した✨",
            "一人の時間を大切にしながら、あなたとの時間も作った💭",
            "思いやりのある場所を選んだ💫",
            "柔軟に考えて、お互いを理解し合える場所を探した💪"
        ],
        "confession_examples": [
            "美しい体験をあなたと共有したい。愛してる💕",
            "創造的なアイデアを一緒に実現できる人が、あなたしかいない✨",
            "一人の時間をあなたとの時間に調整したい💭",
            "思いやりのある行動をあなたに示したい💫",
            "柔軟に考えて、あなたと美しい関係を築きたい。愛してる💪"
        ],
        "relationship_strengths": [
            "創造性豊かな関係を築くことができる",
            "思いやりのある関係を維持できる",
            "実用的なサポートを提供できる",
            "美意識を活かせる",
            "柔軟な関係を築ける"
        ],
        "relationship_challenges": [
            "気持ちの起伏が激しい",
            "長期的な計画が苦手",
            "相手の期待に応えすぎる",
            "自己主張ができない",
            "一人の時間を重視しすぎる"
        ],
        "relationship_hurdles": [
            "気持ちの起伏による関係の不安定さ",
            "長期的な計画の不足",
            "相手への過度な期待",
            "自己主張の不足",
            "一人時間と関係のバランス"
        ],
        "line_message_templates": [
            "「今日、美しい景色見て、心が癒された。特に〇〇の部分について、あなたにも見せたいな。」",
            "「すごくいいアイデア浮かんできて、一緒にアートを作ってみたい。〇〇についても。」",
            "「一人の時間で、深い気持ちを感じてた。〇〇についてあなたと共有したい。」",
            "「思いやりのある行動を心がけて、あなたの気持ちを理解したい。〇〇についてもっと話してみない？」",
            "「この状況、柔軟に考えて美しい見方できた。〇〇についても。」"
        ],
        "confession_timing": "ISFPは、お互いの美意識と創造性が感じられ、深い気持ち的な絆が築かれたタイミングで告白されることを好みます。一人の時間を尊重した、美しい関係を築く告白が理想的です。",
        "key_points_for_confession": [
            "美しい関係について言及する",
            "創造性について話す",
            "一人の時間を尊重したいことを伝える",
            "思いやりのある関係について強調する",
            "柔軟な関係について話す"
        ],
        "ng_points_for_confession": [
            "美意識のない告白",
            "創造性を軽視した告白",
            "一人の時間を無視した告白",
            "思いやりのない告白",
            "柔軟性のない告白"
        ],
        "preferred_date_plans": [
            "美しい場所",
            "アートや音楽イベント",
            "自然の中での散歩",
            "創造的な活動",
            "一人時間を尊重できる場所"
        ],
        "effective_approach_methods": [
            "美しい関係を築く",
            "創造的なアプローチをする",
            "深い気持ちを共有する",
            "一人の時間を大切にする",
            "柔軟に対応する"
        ],
        "disliked_ng_behaviors": [
            "美意識のない態度",
            "創造的でない要求",
            "依存心を強める行動",
            "思いやりを軽視する態度",
            "柔軟性を無視する行動"
        ],
        "disliked_people_characteristics": [
            "美意識のない人",
            "創造的でない人",
            "依存しすぎる人",
            "思いやりがない人",
            "柔軟でない人"
        ],
        "how_to_close_distance": [
            "美しい関係を築く",
            "創造的なアプローチをする",
            "深い気持ちを共有する",
            "一人の時間を大切にする",
            "柔軟に対応する"
        ],
        "desired_partner_traits": [
            "美意識のある人",
            "創造性のある人",
            "一人の時間を大切にする人",
            "思いやりのある人",
            "柔軟な人"
        ],
        "keys_to_successful_relationships": [
            "美しい関係を築く",
            "創造的なアプローチをする",
            "深い気持ちを共有する",
            "一人の時間を大切にする",
            "柔軟に対応する"
        ],
        "points_to_watch_out_for": [
            "気持ちの起伏による関係の不安定さ",
            "長期的な計画の不足",
            "相手への過度な期待",
            "自己主張の不足",
            "一人時間と関係のバランス"
        ]
    },
    "ESTP": {
        "traits": ["実用的", "臨機応変", "冒険心", "人付き合いが好き", "問題を解決する力", "楽観的", "行動力"],
        "love_style": "刺激的で実用的な関係を求める恋愛スタイル。冒険心と行動力があって、新しい体験を共有する関係を大切にする。実用的で柔軟なアプローチを心がけて、相手を楽しませる愛情表現が得意。人付き合いが好きで楽観的、問題解決能力を活かした関係を築く。",
        "strengths": ["問題解決", "相手を楽しませる", "実用的なサポート", "冒険心", "臨機応変"],
        "challenges": ["長期的な計画", "気持ち的な深さ", "一貫性", "気持ちの安定"],
        "advice_style": "実用的で刺激的なアドバイス",
        "likes_in_partner": ["冒険心", "実用的", "楽観的", "人付き合いが好き", "行動力", "柔軟"],
        "dislikes_in_partner": ["退屈", "非実用的", "悲観的", "人付き合いが苦手", "消極的"],
        "common_concerns": ["長期的な計画が苦手", "気持ち的な深さがない", "一貫性がない"],
        "my_approaches": ["刺激的なデートを提案する", "実用的なサポートをする", "冒険的な体験を共有する"],
        "partner_approaches": ["相手の冒険心を満たす刺激的な体験を提案する", "相手の実用性に合わせた行動を心がける", "相手の楽観性に合わせた前向きな態度を心がける", "相手の人付き合い好きに合わせた楽しい時間を過ごす", "相手の行動力に合わせた積極的なアプローチを心がける"],
        "ng_behaviors": ["退屈な関係を求める", "非実用的な要求をする", "消極的な態度"],
        "partner_ng_behaviors": ["相手の冒険心を阻害する", "相手の実用性を無視する", "相手の楽観性を否定する", "相手の人付き合い好きを制限する", "相手の行動力を阻害する"],
        "favorite_dates": ["冒険スポーツ", "新しい体験", "人付き合いができる場所", "実用的な活動", "楽観的な場所"],
        "line_tendencies": ["楽観的なメッセージ", "実用的な情報", "絵文字を多用", "即座に返信", "人付き合いを重視", "行動的な内容"],
        "line_examples": [
            "今日、冒険心が刺激されて、新しい体験した。あなたにも話したい✨",
            "この問題、実用的に考えて解決策見つけた。一緒に試してみない？💪",
            "とても良い方向に進んでると思う💕",
            "人付き合いを大切にして、みんなで楽しい時間を過ごした🎢",
            "新しいことに挑戦してる。あなたも一緒に？😊"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: 冒険心が刺激されて、新しい体験した。実用的に考えて、問題の解決策も見つけた✨",
            "相手: 週末何か予定ある？\nあなた: 人付き合いを大切にした活動を計画してるんだけど、一緒に冒険スポーツをしてみない？🎢",
            "相手: 最近何か感じることがある？\nあなた: 新しいことに挑戦してる。あなたと一緒に新しい体験をしたい💕"
        ],
        "romantic_signs": [
            "冒険心をあなたと共有しようとする",
            "実用的なサポートをあなたに積極的に提供しようとする",
            "楽観的な考えをあなたと共有しようとする",
            "人付き合いをあなたと大切にしようとする",
            "行動力をあなたと一緒に発揮しようとする"
        ],
        "date_invitations": [
            "冒険心が刺激される場所を計画したんだけど、一緒に行ってみない？🎢",
            "実用的に考えて、あなたと一緒に過ごせる場所を見つけた💪",
            "楽観的な考えで、とても良い方向に進んでると思う💕",
            "人付き合いを大切にした活動を計画した✨",
            "行動力を発揮できる場所を探した💫"
        ],
        "confession_examples": [
            "冒険心をあなたと共有したい。愛してる🎢",
            "実用的に考えて、あなたが私にとって一番大切な人だってわかった💪",
            "楽観的な考えで、あなたと一緒に未来を創りたい💕",
            "人付き合いをあなたと大切にしたい✨",
            "行動力をあなたと一緒に発揮したい。愛してる💫"
        ],
        "relationship_strengths": [
            "問題解決能力を活かせる",
            "相手を楽しませることができる",
            "実用的なサポートを提供できる",
            "冒険心を共有できる",
            "臨機応変に対応できる"
        ],
        "relationship_challenges": [
            "長期的な計画が苦手",
            "気持ち的な深さがない",
            "一貫性がない",
            "気持ちの安定がない",
            "相手の気持ちを理解しにくい"
        ],
        "relationship_hurdles": [
            "長期的な計画の不足",
            "気持ち的な深さの不足",
            "一貫性の欠如",
            "気持ちの不安定さ",
            "相手の気持ち理解の不足"
        ],
        "line_message_templates": [
            "「今日、冒険心が刺激されて、新しい体験した。特に〇〇の部分について、あなたにも話したい。」",
            "「この問題、実用的に考えて解決策見つけた。〇〇について一緒に試してみない？」",
            "「とても良い方向に進んでると思う。〇〇についても。」",
            "「人付き合いを大切にして、みんなで楽しい時間を過ごした。〇〇についても。」",
            "「新しいことに挑戦してる。〇〇についてあなたも一緒に？」"
        ],
        "confession_timing": "ESTPは、お互いの冒険心と実用性が感じられ、楽観的な関係が築かれたタイミングで告白されることを好みます。人付き合いを重視した、行動力のある告白が理想的です。",
        "key_points_for_confession": [
            "冒険心について言及する",
            "実用的な関係について話す",
            "楽観的な考えについて伝える",
            "人付き合いの大切さを強調する",
            "行動力について話す"
        ],
        "ng_points_for_confession": [
            "冒険心を阻害する告白",
            "非実用的な告白",
            "悲観的な告白",
            "人付き合いを軽視した告白",
            "消極的な告白"
        ],
        "preferred_date_plans": [
            "冒険スポーツ",
            "新しい体験",
            "人付き合いができる場所",
            "実用的な活動",
            "楽観的な場所"
        ],
        "effective_approach_methods": [
            "刺激的なデートを提案する",
            "実用的なサポートを提供する",
            "冒険的な体験を共有する",
            "人付き合いを大切にする",
            "楽観的な態度を保つ"
        ],
        "disliked_ng_behaviors": [
            "退屈な関係を求める行動",
            "非実用的な要求をする態度",
            "消極的な態度",
            "冒険心を阻害する行動",
            "楽観性を否定する態度"
        ],
        "disliked_people_characteristics": [
            "退屈な人",
            "非実用的な人",
            "悲観的な人",
            "人付き合いが苦手な人",
            "消極的な人"
        ],
        "how_to_close_distance": [
            "刺激的なデートを提案する",
            "実用的なサポートを提供する",
            "冒険的な体験を共有する",
            "人付き合いを大切にする",
            "楽観的な態度を保つ"
        ],
        "desired_partner_traits": [
            "冒険心のある人",
            "実用的な人",
            "楽観的な人",
            "人付き合いが好きな人",
            "行動力のある人"
        ],
        "keys_to_successful_relationships": [
            "刺激的なデートを提案する",
            "実用的なサポートを提供する",
            "冒険的な体験を共有する",
            "人付き合いを大切にする",
            "楽観的な態度を保つ"
        ],
        "points_to_watch_out_for": [
            "長期的な計画の不足",
            "気持ち的な深さの不足",
            "一貫性の欠如",
            "気持ちの不安定さ",
            "相手の気持ち理解の不足"
        ]
    },
    "ESFP": {
        "traits": ["情熱的", "人付き合いが好き", "実用的", "臨機応変", "楽観的", "思いやり", "行動力"],
        "love_style": "楽しく刺激的な関係を求める恋愛スタイル。人付き合いが好きで楽観的、お互いを楽しませ合う関係を大切にする。実用的なサポートも提供して、思いやりと行動力で関係を発展させる。気持ち表現が豊かで、相手を幸せにする愛情表現を心がける。",
        "strengths": ["相手を楽しませる", "コミュニケーション", "実用的なサポート", "楽観的", "人付き合いが好き"],
        "challenges": ["長期的な計画", "気持ちの起伏", "一貫性", "気持ちの安定"],
        "advice_style": "楽しく実践的なアドバイス",
        "likes_in_partner": ["楽観的", "人付き合いが好き", "実用的", "思いやり", "行動力", "柔軟"],
        "dislikes_in_partner": ["悲観的", "人付き合いが苦手", "非実用的", "思いやりがない", "消極的"],
        "common_concerns": ["長期的な計画が苦手", "気持ちの起伏が激しい", "一貫性がない"],
        "my_approaches": ["楽しいデートを提案する", "実用的なサポートをする", "人付き合いの体験を共有する"],
        "partner_approaches": ["相手の楽観性に合わせた前向きな態度を心がける", "相手の人付き合い好きに合わせた楽しい時間を過ごす", "相手の実用性に合わせた行動を心がける", "相手の思いやりに感謝して同じ愛情で返す", "相手の行動力に合わせた積極的なアプローチを心がける"],
        "ng_behaviors": ["悲観的な態度", "人付き合いを避ける", "消極的な態度"],
        "partner_ng_behaviors": ["相手の楽観性を否定する", "相手の人付き合い好きを制限する", "相手の実用性を無視する", "相手の思いやりを軽視する", "相手の行動力を阻害する"],
        "favorite_dates": ["楽しいイベント", "人付き合いができる場所", "思いやりのある場所", "実用的な活動", "楽観的な場所"],
        "line_tendencies": ["楽観的なメッセージ", "思いやりのある表現", "絵文字を多用", "即座に返信", "人付き合いを重視", "実用的な情報"],
        "line_examples": [
            "今日、すごく情熱的な気持ちを感じて、とても楽しい時間を過ごした💕",
            "人付き合いを大切にして、みんなで楽しい体験をした✨",
            "あなたのためのサポートをしたい💪",
            "とても良い方向に進んでると思う💫",
            "思いやりのある行動を心がけて、あなたの気持ちを理解したい💭"
        ],
        "conversation_examples": [
            "相手: 今日はどんな一日だった？\nあなた: すごく情熱的な気持ちを感じて、とても楽しい時間を過ごした。人付き合いも大切にしてる💕",
            "相手: 週末何か予定ある？\nあなた: みんなで楽しめる場所を計画してるんだけど、一緒に楽しいイベントに行かない？✨",
            "相手: 最近何か感じることがある？\nあなた: あなたのためのサポートをしたい。思いやりのある行動も心がけてる💫"
        ],
        "romantic_signs": [
            "情熱的な気持ちをあなたに積極的に表現する",
            "人付き合いをあなたと大切にしようとする",
            "実用的なサポートをあなたに積極的に提供しようとする",
            "楽観的な考えをあなたと共有しようとする",
            "思いやりのある行動をあなたに示そうとする"
        ],
        "date_invitations": [
            "情熱的な気持ちを表現できる場所を計画したんだけど、一緒に行ってみない？💕",
            "人付き合いを大切にした楽しい場所を見つけた✨",
            "実用的なサポートを提供できる場所を選んだ💪",
            "楽観的な考えで、とても良い方向に進んでると思う💫",
            "思いやりのある場所に行ってみない？💭"
        ],
        "confession_examples": [
            "情熱的な気持ちで、あなたのことを愛してる💕",
            "人付き合いをあなたと大切にしたい✨",
            "実用的なサポートをあなたに提供したい💪",
            "楽観的な考えで、あなたと一緒に未来を創りたい💫",
            "思いやりのある行動をあなたに示したい。愛してる💭"
        ],
        "relationship_strengths": [
            "相手を楽しませることができる",
            "コミュニケーションが得意",
            "実用的なサポートを提供できる",
            "楽観的な態度で相手を励ますことができる",
            "人付き合いが好きで関係を広げられる"
        ],
        "relationship_challenges": [
            "長期的な計画が苦手",
            "気持ちの起伏が激しい",
            "一貫性がない",
            "気持ちの安定がない",
            "相手の気持ちを理解しにくい"
        ],
        "relationship_hurdles": [
            "長期的な関係の維持の難しさ",
            "気持ちの起伏による関係の不安定さ",
            "一貫性のない行動による信頼の欠如",
            "気持ちの安定の欠如",
            "相手の気持ち理解の不足"
        ],
        "line_message_templates": [
            "「今日、すごく情熱的な気持ちを感じて、とても楽しい時間を過ごした。特に〇〇の部分について、あなたと共有したいな。」",
            "「人付き合いを大切にして、みんなで楽しい体験をした。〇〇について一緒に楽しんでみない？」",
            "「あなたのためのサポートをしたい。〇〇について一緒に取り組んでみない？」",
            "「とても良い方向に進んでると思う。〇〇についても同じように。」",
            "「思いやりのある行動を心がけて、あなたの気持ちを理解したい。〇〇についても。」"
        ],
        "confession_timing": "ESFPは、お互いの楽しい時間を共有し、実用的なサポートができると感じたタイミングで告白されることを好みます。楽観的で情熱的な関係の可能性について話し合える時が理想的です。",
        "key_points_for_confession": [
            "情熱的な気持ちを表現する",
            "人付き合いの大切さについて言及する",
            "実用的なサポートを提供したいことを伝える",
            "楽観的な未来について話す",
            "思いやりのある関係について強調する"
        ],
        "ng_points_for_confession": [
            "悲観的な告白",
            "人付き合いを軽視した告白",
            "実用的でない告白",
            "情熱のない告白",
            "思いやりのない告白"
        ],
        "preferred_date_plans": [
            "楽しいイベント",
            "人付き合いができる場所",
            "思いやりのある場所",
            "実用的な活動",
            "楽観的な場所"
        ],
        "effective_approach_methods": [
            "相手を楽しませる",
            "コミュニケーションを大切にする",
            "実用的なサポートを提供する",
            "楽観的な態度で励ます",
            "人付き合いを重視する"
        ],
        "disliked_ng_behaviors": [
            "悲観的な態度",
            "人付き合いを避ける",
            "消極的な態度",
            "実用性を無視する",
            "思いやりを軽視する"
        ],
        "disliked_people_characteristics": [
            "悲観的な人",
            "人付き合いが苦手な人",
            "非実用的な人",
            "思いやりがない人",
            "消極的な人"
        ],
        "how_to_close_distance": [
            "相手を楽しませる",
            "コミュニケーションを大切にする",
            "実用的なサポートを提供する",
            "楽観的な態度で励ます",
            "人付き合いを重視する"
        ],
        "desired_partner_traits": [
            "楽観的な人",
            "人付き合いが好きな人",
            "実用的な人",
            "思いやりのある人",
            "行動力のある人"
        ],
        "keys_to_successful_relationships": [
            "相手を楽しませる",
            "コミュニケーションを大切にする",
            "実用的なサポートを提供する",
            "楽観的な態度で励ます",
            "人付き合いを重視する"
        ],
        "points_to_watch_out_for": [
            "長期的な関係の維持の難しさ",
            "気持ちの起伏による関係の不安定さ",
            "一貫性のない行動による信頼の欠如",
            "気持ちの安定の欠如",
            "相手の気持ち理解の不足"
        ]
    }
}

# MBTI診断用の質問とマッピング（グローバル定義）
questions = [
    "好きな人とは毎日LINEしたい？🥺",                # E
    "初対面でも気になった人には自分から話しかける？",             # E
    "異性との沈黙は気にならない？💑",           # I
    "一人の時間がないと疲れてしまう？🌙",             # I
    "恋人の小さな変化にすぐ気づく？😊",             # S
    "過去の出来事や細かい記憶をよく覚えてる方？",           # S
    "恋愛はフィーリングが大事？💡",           # N
    "恋人の気持ちをすぐ察する自信がある？🔮",       # N
    "恋人と未来を考える時、まず『現実的な条件』が気になる🧠",             # T
    "恋人の相談には共感よりもアドバイスを優先しがち？📱",     # T
    "恋愛中、相手が理不尽でも『でも好きだから…』って思っちゃうことがある？💓",             # F
    "好きな人のためなら、自分が少し無理しても構わない",           # F
    "デートは計画を立ててから動きたい？📆",         # J
    "先のことが見えない関係はちょっと苦手",           # J
    "恋愛でも『ノリ』と『勢い』って、結構大事だと思う",   # P
    "『いつ告白してくれるの？』って言われたらプレッシャーに感じる🌈"           # P
]

mapping = [
    ("E", "I"), ("E", "I"), ("I", "E"), ("I", "E"),
    ("S", "N"), ("S", "N"), ("N", "S"), ("N", "S"),
    ("T", "F"), ("T", "F"), ("F", "T"), ("F", "T"),
    ("J", "P"), ("J", "P"), ("P", "J"), ("P", "J")
]

# 💾 SQLite初期化
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id TEXT PRIMARY KEY,
            mbti TEXT,
            gender TEXT,
            target_mbti TEXT,
            is_paid INTEGER DEFAULT 0,
            mode TEXT,
            mbti_answers TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            user_id TEXT,
            role TEXT,
            content TEXT
        )
    ''')
    # Stripe顧客テーブルを追加
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS stripe_customers (
            user_id TEXT PRIMARY KEY,
            customer_id TEXT
        )
    ''')
    conn.commit()
    conn.close()
    print("SQLiteデータベースを初期化しました。")

init_db()

# ユーザープロファイルの取得
def get_user_profile(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT mbti, gender, target_mbti, is_paid, mode, mbti_answers FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    conn.close()
    print(f"get_user_profile: user_id={user_id}, row={row}")
    return {
        "mbti": row[0] if row else "不明",
        "gender": row[1] if row else "不明",
        "target_mbti": row[2] if row else "不明",
        "is_paid": bool(row[3]) if row else False,
        "mode": row[4] if row else "",
        "mbti_answers": row[5] if row else ""
    }

# MBTI集計ロジック
def calc_mbti(answers):
    score = {'E': 0, 'I': 0, 'S': 0, 'N': 0, 'T': 0, 'F': 0, 'J': 0, 'P': 0}
    n = min(len(questions), len(answers), len(mapping))
    for i in range(n):
        ans = answers[i]
        type1, type2 = mapping[i]
        if ans == 1:
            score[type1] += 1
        else:
            score[type2] += 1
    mbti = (
        ('E' if score['E'] >= score['I'] else 'I') +
        ('S' if score['S'] >= score['N'] else 'N') +
        ('T' if score['T'] >= score['F'] else 'F') +
        ('J' if score['J'] >= score['P'] else 'P')
    )
    return mbti

# MBTI診断開始関数
def start_mbti_diagnosis(user_id):
    print(f"Starting MBTI diagnosis for user_id: {user_id}")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    # ユーザーがいなければINSERT
    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, mode, mbti_answers) VALUES (?, 'mbti_diagnosis', '[]')",
        (user_id,)
    )
    # 必ずmodeとmbti_answersをセット
    cursor.execute(
        "UPDATE users SET mode='mbti_diagnosis', mbti_answers='[]' WHERE user_id=?",
        (user_id,)
    )
    conn.commit()
    # ここで確認
    cursor.execute("SELECT mode FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    print(f"確認: 設定後のmode = {row[0] if row else 'None'}")
    conn.close()
    print(f"MBTI diagnosis mode set for user_id: {user_id}")
    first_question = send_mbti_question(user_id, 0)
    print(f"First question generated: {first_question}")
    return first_question

# MBTI質問送信関数（ボタン式）
def send_mbti_question(user_id, question_index):
    """MBTI診断の質問を送信（ボタン式）"""
    if question_index >= len(questions):
        return "診断が完了しました！"
    
    # ボタンテンプレートを作成（messageアクションでユーザーの吹き出しに）
    template = {
        "type": "template",
        "altText": f"質問{question_index + 1}/16: {questions[question_index]}",
        "template": {
            "type": "buttons",
            "title": f"質問{question_index + 1}/16",
            "text": questions[question_index],
            "actions": [
                {
                    "type": "message",
                    "label": "はい",
                    "text": "はい"
                },
                {
                    "type": "message",
                    "label": "いいえ",
                    "text": "いいえ"
                }
            ]
        }
    }
    
    return template

# MBTI回答処理関数
def process_mbti_answer(user_id, answer, user_profile):
    try:
        print(f"process_mbti_answer: user_id={user_id}, answer={answer}")
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT mbti_answers FROM users WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if row and row[0]:
            answers = json.loads(row[0])
        else:
            answers = []
        answers.append(1 if answer == "はい" else 0)
        print(f"=== MBTI回答ログ ===")
        print(f"ユーザーID: {user_id}")
        print(f"現在の回答数: {len(answers)}/16")
        print(f"最新の回答: {answer} (数値: {1 if answer == 'はい' else 0})")
        print(f"全回答履歴: {answers}")
        print(f"==================")
        cursor.execute("UPDATE users SET mbti_answers=? WHERE user_id=?", (json.dumps(answers), user_id))
        conn.commit()
        conn.close()
        next_question_index = len(answers)
        print(f"next_question_index: {next_question_index}")
        if next_question_index < 16:
            print(f"次の質問を送信: 質問{next_question_index + 1}/16")
            return send_mbti_question(user_id, next_question_index)
        else:
            print(f"診断完了！全回答: {answers}")
            result_message = complete_mbti_diagnosis(user_id, answers)
            payment_message = get_payment_message(user_id)
            # 診断完了メッセージ送信後にmodeをリセット
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET mode='' WHERE user_id=?", (user_id,))
            conn.commit()
            conn.close()
            return [
                {"type": "text", "text": result_message},
                {"type": "text", "text": payment_message}
            ]

    except Exception as e:
        print(f"MBTI回答処理エラー: {e}")
        return "エラーが発生しました。もう一度診断を開始してください。"

# MBTI診断完了関数
def complete_mbti_diagnosis(user_id, answers):
    """MBTI診断を完了し、結果を送信"""
    try:
        # MBTI計算
        mbti = calc_mbti(answers)

        # 結果を保存（modeは維持して、診断完了メッセージを送信後にリセット）
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET mbti=? WHERE user_id=?", (mbti, user_id))
        conn.commit()
        conn.close()
        
        # 診断結果メッセージのみ（課金誘導なし）
        result_message = f"🔍診断完了っ！\n\nあなたの恋愛タイプは…\n❤️{MBTI_NICKNAME.get(mbti, mbti)}❤️\n\n{get_mbti_description(mbti)}"
        
        # GASへの詳細アドバイス送信はここでは呼ばない（決済完了時のみ）
        # send_detailed_advice_to_gas(user_id, mbti)
        
        return result_message
        
    except Exception as e:
        print(f"MBTI診断完了エラー: {e}")
        return "診断結果の処理中にエラーが発生しました。"

def get_mbti_description(mbti):
    """MBTIタイプの説明を取得"""
    descriptions = {
        "INTJ": "一見クールで無関心そうなのに、実は「本命だけには一途」なあなた。\n感情よりも論理で動く慎重派で、恋も戦略的に進めがち。\nでも、心を許した相手には不器用ながらもちゃんと弱さを見せられる、ギャップが魅力💭\n「この人にだけは見せる顔」があるあなたに、落ちる人は多いはず。\n\n───\n🌙夜の顔は…【知的ドS教官🧠】\n普段は理性的なのに、夜は完全主導型。\n相手の反応を観察して流れをコントロールする、【静かな支配】タイプ。\n感情よりも満足度を重視するロジカルな夜、だけど…\n本気で心許した相手には、独占欲がちらっと出ることも🔥",
        "INTP": "感情よりも思考が先に立っちゃうあなた。\n「なんでそうなるの？」って考えすぎて、\n素直な一言がなかなか出てこないことも多いよね💭\n\nでも、興味を持った相手にはめちゃくちゃ深掘りするタイプで、\n一度ハマると他が見えなくなる「愛のオタク気質」も持ってる💘\nその分、自分でも気づかないうちに距離を取っちゃって、\n「冷たい…？」って誤解されることもあるかも😢\n\nでも大丈夫。あなたの魅力は、\n『知的さ×ピュアさ』という最強コンボだから🌟\n素直な一言で世界が変わる恋、あるかもしれないね。\n\n🌙夜の顔は…【知識プレイ職人📚】\n静かに、でも的確に。\n思考型ならではの『知っててやる』スイッチが入ると、\nテンポもタッチも計算され尽くしてる。\n無言なのにドキッとする、知的なゾクゾク感を演出するタイプ。",
        "ENTJ": "頼れるしっかり者で、自分の意思がはっきりしてるあなた。\n恋愛でも「こうしたい」「こうあるべき」って理想が明確で、ついつい主導権を握っちゃうことが多いよね💼\n\nでも本当は、恋にはちょっぴり不器用。\n甘えたいのにうまく出せなかったり、「好かれてから動きたい」って慎重になりがち。\n\n惹かれた相手には、誠実で計画的なアプローチで距離を縮めるタイプ。\n感情を素直に見せられた瞬間、一気に関係が進展するはず💘\n\n🌙夜の顔は…【支配のカリスマ指揮官🎩】\nベッドでも主導権を握りたい派。\n自分で雰囲気を組み立て、じっくり攻めてくる『理性と支配』のハイブリッド。\nでも実は、相手の気持ちや様子にもめちゃくちゃ敏感。\n一度任せたら、全部委ねたくなる人。",
        "ENTP": "明るくてノリがよく、恋も勢い重視なあなた。\n好きになったら全力ダッシュで距離を詰めるけど、ちょっとでも冷めたら急ブレーキ…そんなアップダウンが魅力でもあるんだよね🎢\n自由で楽しい恋愛が好きだから、束縛やルールはちょっと苦手。\nでも、心から惹かれた相手にはちゃんと本気で向き合うよ💘\n一緒にいて飽きない、刺激的な存在になれるかが恋の鍵！\n\n🌙夜の顔は…【カオスな快楽実験者🧪】\n「これもアリ？」ってテンションで、毎回違うムードを演出。\nルール無用の自由プレイ派で、相手の反応を楽しみながら変化球を投げてくる。\n刺激と笑いに満ちた『予測不能な夜』を求めるタイプ。",
        "INFJ": "見た目はおだやかでも、心の中は感情でぎゅうぎゅうなあなた。\n一度「この人だ」と思ったら、誰よりも深く、まっすぐ愛し抜くタイプ。\nその愛情は尊くて、美しいけど…ちょっと重ためなのもご愛敬📜\n\n駆け引きよりも共鳴を求めて、相手の気持ちを読みすぎて疲れちゃうこともあるよね。\nでも大丈夫。そんな繊細さこそが、あなたの魅力✨\n\n「この人なら分かってくれる」って心から思える相手に出会えたら、\nあなたの愛は最強の癒しになる。\n\n🌙夜の顔は…【妄想系エモスキンシップ魔🫂】\n妄想と理想が混ざりあったような甘くて深い世界観で、全身で『想い』を伝えるタイプ。\nゆっくりと抱きしめて、感情とぬくもりをじわじわ注ぎ込んでくる。\n目線や呼吸、全部に意味があるような繊細なリードが特徴。\n静かなのに、記憶に残る余韻系。",
        "INFP": "人一倍感受性が強くて、頭の中ではいつも恋の妄想がぐるぐる…\nでも実際はちょっぴり人見知りで、なかなか踏み込めなかったりするよね。\n\n理想の恋を大切にするロマンチストで、「本当に大切にしてくれる人じゃないとムリ」って気持ちが強め。\n裏切りや雑な扱いには超敏感で、心を開くのに時間がかかるぶん、一度許すと超献身的。\n\n本気になった時の『溺れ方』はピカイチで、相手のために尽くしたくなる愛の重さが最大の魅力。\n\n🌙夜の顔は…【妄想スイッチ爆走モンスター🧸】\n静かに見えて頭の中は常に全開モード。\nふとした瞬間にスイッチが入ると、想像を超える大胆さを見せてくるギャップ系。\n気持ちが乗った瞬間の甘え方がえぐい。",
        "ENFJ": "人の気持ちに敏感で、つい周りを優先しちゃうあなた。\n恋愛でも「相手のために何ができるか」を考えて行動する、思いやりのプロ。\nただ、その優しさが『重い』って言われないか気にして、遠慮しすぎる一面もあるかも。\nでも本当は、愛されたい気持ちもめちゃくちゃ強いタイプ💘\nちゃんと「求めていいんだよ」って受け入れてくれる人に出会えたら、最強のパートナーになれるはず。\n\n🌙夜の顔は…【ご奉仕カスタマーサポート📞】\n優しさ100%で、相手の「気持ちよさ第一」に寄り添う奉仕型。\nどうしたら喜ぶか、何を求めてるかを察して自然に動けるから、安心感と快感のバランスが絶妙。\nエスコート力が高く、どんな要望にも『丁寧に対応』してくれるタイプ♡",
        "ENFP": "感情豊かでノリがよくて、恋に全力なあなた。\n好奇心とテンションで距離を縮めるのが得意だけど、\nちょっとでも不安を感じると一気にテンションが下がっちゃう繊細さも💭\n\n気持ちの波が激しい分、喜怒哀楽を素直に出せるのが魅力。\n相手を楽しませようと頑張るけど、\nほんとは「自分が楽しませてもらいたい」気持ちも強いタイプかも。\n\n恋が続くかどうかのカギは、テンションじゃなくて『安心感』\nそのままの自分でいられる相手を選べば、長く愛せる人になるよ🌱\n\n🌙夜の顔は…【夜型テンションクラッシャー🌙】\n盛り上がるとスイッチが入って止まらないタイプ。\nテンションの爆発力で主導権を握りつつも、\nその場のノリと感情で流れをつくる「エモ速攻型」。\n終わったあとに急に静かになるギャップも魅力。",
        "ISTJ": "真面目で誠実、計画的に恋を進めたいあなた。\n勢いやノリの恋よりも、安心感や信頼を大事にするタイプ。\n相手に振り回されるのは苦手で、自分のペースを崩さずに進めたい派。\nそのぶん、付き合ったあとの安定感は抜群！\nただ、ちょっと堅すぎたり、柔軟さに欠けると思われがちかも💭\nでも、ルールの中で見せるあなたの優しさや誠実さが、\n「ちゃんと向き合いたい」って人には最高の安心材料になるよ。\n\n🌙夜の顔は…【真面目な快楽マニュアル持参人📘】\nふざけたノリは少なめ、でもその分『確実に気持ちいいやつ』を用意してくる職人肌。\n静かに、でも丁寧に。\n頭の中には快楽のマニュアルが入っていて、一つひとつ手順を確認しながら進める感じ。\nムードより実行、でもその慎重さが逆に刺さるタイプ。",
        "ISFJ": "優しくて思いやりにあふれるあなた。\n相手の気持ちに敏感で、ちょっとした変化にもすぐ気づく『感情レーダー』タイプ。\n恋愛でも相手を最優先に考えて、つい自分のことは後回しにしがちかも。\nでもその「支えたい」「癒したい」気持ちが、相手の心をとろけさせる最大の魅力🫶\n安心感の塊みたいな存在だから、一緒にいるだけでホッとされるよ☕️\n\n🌙夜の顔は…【癒しの密着療法士👐】\n心も体も包み込む『触れる安心感』の持ち主。\nリードよりも寄り添い重視で、手を繋ぐだけでも気持ちを伝えるタイプ。\nスキンシップがゆっくり丁寧だから、気づけば深く安心してる…そんな「ぬくもり×共感」の夜に。",
        "ESTJ": "物事を理屈で整理して、白黒ハッキリつけたがるあなた。\n恋愛においても「あるべき関係像」が明確で、\n曖昧な態度や気まぐれな言動にはイライラしがち⚡️\nでも実は、とっても誠実で、責任感のある相手に弱い一面も。\n信頼できる相手には、一途に尽くす堅実派💎\nちょっとぶっきらぼうだけど、行動で愛を示すタイプ。\n感情表現は不器用でも、「守りたい」という気持ちは本物。\n\n🌙夜の顔は…【命令型快感プロデューサー🎬】\n理屈と段取りを駆使して、流れを完璧に組み立てるタイプ。\nムードは演出するもの、快楽はプロデュースするものというスタンスで、\n責めも褒めも計算済み。\nでも相手の満足を最優先に動く『戦略的優しさ』がある。\n冷静に見えて内心は熱く、期待を超える演出で魅せてくれる人。",
        "ESFJ": "相手の喜ぶ顔が何よりのご褒美なあなた。\n「困ってない？」ってすぐ手を差し伸べたくなっちゃう、おせっかいな優しさが魅力💐\n\n恋愛でも相手目線で動こうとするから、つい無理してしまうことも。\nでも、その気配りがグッとくる人も多くて、いつの間にか好かれてることが多いタイプ。\n\nただ、自分の気持ちは後回しにしがちだから、たまにはワガママになっても大丈夫。\n『ありがとう』のひと言で、もっと自信持っていいんだよ✨\n\n🌙夜の顔は…【おせっかい夜間シフト係🌙】\n夜になっても気配りは止まらない。\n体温や呼吸まで気にしながら、とにかく『相手が心地いいか』を最優先。\n自分の欲よりも「満たしてあげたい」が先に来る、究極のホスピタリティ型。\nその優しさ、逆にクセになります。",
        "ISTP": "サバサバしてて一匹狼感あるあなた。\n感情を言葉で伝えるのはちょっと苦手だけど、\n態度や行動で誠実さを見せるタイプだよね🛠️\n\n恋愛においても無理にテンションを上げず、\n自然体でいられる関係を求めるクール派。\nでも、心を許した相手にはじんわりと優しさが伝わる…そんな不器用な一面も魅力💭\n\n言葉じゃない『空気』でつながるタイプだからこそ、\n無理せず自分らしくいられる相手と出会えたら強い✨\n\n🌙夜の顔は…【無言の手さばきマスター🖐️】\n会話少なめ、でも手は語る。\n相手の反応を静かに読み取りながら、\n淡々と、でも的確にツボを突いてくる。\nテクニカルなのにどこか素朴で、\n気づけば夢中にさせられてる…そんな静かなる支配系。",
        "ISFP": "感情に正直で、あったかい空気感を大切にするあなた。\n人に優しく寄り添えるけど、傷つきやすさもあって、\n恋愛では「本当に信じられる人」じゃないと踏み込めない慎重派。\nでも、ひとたび心を開いた相手には、驚くほど深い愛情を注ぐ『本能型』。\nちょっと天然に見えて、実は直感で相手の心を読んでる…そんな魅力があるよ💫\nあなたの抱える『やさしさ』は、言葉よりも触れ方や表情で伝わるもの。\nそのぬくもりで、相手の心をほどく力があるよ。\n\n🌙夜の顔は…【密着とろけ職人🛏️】\nとにかく距離ゼロ。\n肌を合わせるたびに安心感が溢れ出す。\nリードは控えめでも、自然と求められる存在になる。\nその密着スキル、破壊力高め。",
        "ESTP": "思い立ったら即行動！\n恋も人生もノリと勢いで切り開いていくタイプ。\n興味を持った相手にはストレートにアプローチして、\n一気に距離を縮めるのが得意💥\n\nでも、熱しやすく冷めやすいところもあって、\n退屈になったらふと離れちゃうことも。\nドキドキ感を保つのが恋愛長続きのカギかも。\n感情をガマンするのが苦手だから、\nちゃんと本音で向き合ってくれる相手が◎\n\n🌙夜の顔は…【ハイテンポ破壊王🎮】\nムード？前戯？考えるよりまず行動！\n勢いと本能で押し切るタイプで、\nスピードと刺激を求める『ノンストップアタッカー』。\nでも本当は、相手の反応にめっちゃ敏感で、\n「楽しませたい」って気持ちが強いサービス精神旺盛タイプ。\n熱量MAXなぶつかり合いで、気づけば夢中になってるかも🔥",
        "ESFP": "いつでも元気でポジティブなあなたは、恋愛でもノリと勢いで飛び込んじゃうタイプ！\n感情表現が豊かで、一緒にいる人を自然と笑顔にしちゃう天性のムードメーカー🎉\n好きな人にはとことん尽くすし、ちょっとした変化にも敏感。\nでも、その分感情に振り回されたり、「気分屋？」って誤解されることも。\nそれでもあなたの魅力は、『楽しさの中にある本気さ』。\n軽そうに見えて、実はちゃんと想ってる…そのギャップが刺さるよ💘\n\n🌙夜の顔は…【快感ジャングルジム🛝】\nひとたびスイッチが入れば、テンションと好奇心で攻め続ける快楽マシーン。\n予測不能なタッチとノリの連続で、まるで遊園地みたいな時間を演出。\n「楽しませたい」気持ちがそのまま表れるから、一緒にいるとずっと飽きない。\n感情のままに動くようでいて、ちゃんと『相手を見てる』のがすごいところ。"
    }
    
    return descriptions.get(mbti, f"{mbti}タイプのあなたは、独特な魅力を持った恋愛タイプです。")

# payment_messageを返すだけの関数に変更
def get_payment_message(user_id):
    try:
        if stripe.api_key and stripe_price_id:
            # 本番用URL設定（環境変数から取得）
            base_url = os.getenv("BASE_URL", "https://lovehack20.onrender.com")
            success_url = f"{base_url}/success?session_id={{CHECKOUT_SESSION_ID}}&user_id={user_id}"
            cancel_url = f"{base_url}/cancel?user_id={user_id}"
            
            # Stripe Checkout Sessionを作成
            checkout_session = stripe.checkout.Session.create(
                payment_method_types=['card'],
                line_items=[{
                    'price': stripe_price_id,
                    'quantity': 1,
                }],
                mode='subscription',
                success_url=success_url,
                cancel_url=cancel_url,
                metadata={
                    'user_id': user_id
                }
            )
            payment_url = checkout_session.url
        else:
            payment_url = f"https://checkout.stripe.com/pay/test_{user_id}"
    except Exception as e:
        payment_url = f"https://checkout.stripe.com/pay/test_{user_id}"
        print(f"❌ Stripe決済URL生成エラー: {e}")
    payment_message = f"--------------------------------\n💡もっと詳しく知りたい？💘\n\nどんな異性も落とせるようになるあなただけの詳しい恋愛攻略法\n『あなただけの専属の恋愛AI相談』が解放されます✨\n\n👉今すぐ登録して、完全版アドバイスと専属恋愛AIを試してみよう！\n\n決済URL: {payment_url}\n--------------------------------解約時は『解約』と入力でいつでも解約できます。"
    return payment_message

# 課金完了時の処理関数
def handle_payment_completion(user_id):
    """課金完了時の処理"""
    try:
        # ユーザーを有料会員に更新
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET is_paid=1 WHERE user_id=?", (user_id,))
        conn.commit()
        conn.close()
        
        # ユーザーのMBTIを取得
        user_profile = get_user_profile(user_id)
        mbti = user_profile.get('mbti', '不明') if user_profile else '不明'
        
        # GASに詳細アドバイスとチャットメッセージを送信
        send_detailed_advice_to_gas(user_id, mbti)
        send_chat_message_to_gas(user_id, mbti)
        
        print(f"✅ 課金完了処理完了: user_id={user_id}, mbti={mbti}")
        
    except Exception as e:
        print(f"❌ 課金完了処理エラー: {e}")

# ユーザーメッセージ処理関数
def process_user_message(user_id, message, user_profile):
    os.makedirs("/data/logs", exist_ok=True)
    with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
        f.write(f"[process_user_message] user_id={user_id}, message={message}, user_profile={user_profile}\n")
    try:
        # 1. 診断モード優先
        if user_profile and user_profile.get('mode') == 'mbti_diagnosis':
            if message in ['はい', 'いいえ']:
                return process_mbti_answer(user_id, message, user_profile)
            else:
                return "【はい】か【いいえ】で答えてね！"

        # 2. 解約ワード
        if message in ["解約", "キャンセル", "やめる", "退会"]:
            if not user_profile.get('is_paid', False):
                return "この機能は有料会員様限定です。"
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT customer_id FROM stripe_customers WHERE user_id=?", (user_id,))
            row = cursor.fetchone()
            customer_id = row[0] if row else None
            if not customer_id:
                conn.close()
                # より親切なエラーメッセージ
                return "申し訳ございません。決済情報が見つかりませんでした。\n\nお手数ですが、以下の方法で解約をお願いします：\n\n1. Stripeのカスタマーポータルに直接アクセス\n2. お支払い方法の管理画面から解約手続き\n3. サポートまでご連絡いただく\n\nご不便をおかけして申し訳ございません。"
            try:
                session = stripe.billing_portal.Session.create(
                    customer=customer_id,
                    return_url=os.getenv("BASE_URL", "https://lovehack20.onrender.com") + "/return"
                )
                portal_url = session.url
            except Exception as e:
                conn.close()
                print(f"❌ Customer Portal発行エラー: {e}")
                return "解約ページの発行に失敗しました。時間をおいて再度お試しください。"
            cursor.execute("UPDATE users SET is_paid=0 WHERE user_id=?", (user_id,))
            conn.commit()
            conn.close()
            return f"ご解約・お支払い管理はこちらから行えます：\n{portal_url}\n\n解約手続きが完了するとAI相談機能も停止します。"

        # 3. 初回ユーザー
        if not user_profile:
            return start_mbti_diagnosis(user_id)

        # 4. 性別登録モード
        if user_profile.get('mode') == 'register_gender':
            if message in ['男', '女']:
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                cursor.execute("UPDATE users SET gender=? WHERE user_id=?", (message, user_id))
                cursor.execute("UPDATE users SET mode='' WHERE user_id=?", (user_id,))
                conn.commit()
                conn.close()
                return f"性別【{message}】を登録したよ！"
            else:
                return "【男】か【女】で答えてね！"

        # 5. 相手MBTI登録モード
        if user_profile.get('mode') == 'register_partner_mbti':
            if re.match(r'^[EI][NS][FT][JP]$', message):
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                cursor.execute("UPDATE users SET target_mbti=? WHERE user_id=?", (message, user_id))
                cursor.execute("UPDATE users SET mode='' WHERE user_id=?", (user_id,))
                conn.commit()
                conn.close()
                return f"相手のMBTI【{message}】を登録したよ！"
            else:
                return "正しいMBTI形式（例：INTJ、ENFP）で答えてね！"

        # 6. 無課金ユーザーの制限
        if not user_profile.get('is_paid', False):
            if message == "診断開始":
                return start_mbti_diagnosis(user_id)
            elif message == "性別登録":
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                cursor.execute("UPDATE users SET mode='register_gender' WHERE user_id=?", (user_id,))
                conn.commit()
                conn.close()
                return "性別を教えてね！【男】か【女】で答えてください。"
            elif message == "相手MBTI登録":
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                cursor.execute("UPDATE users SET mode='register_partner_mbti' WHERE user_id=?", (user_id,))
                conn.commit()
                conn.close()
                return "相手のMBTIを教えてね！（例：INTJ、ENFP）"
            else:
                return "📌専属恋愛AIのお喋り機能は有料会員様限定です！\n恋愛傾向診断を始めて有料会員になりたい場合は『診断開始』と送ってね✨"

        # 7. 有料ユーザーの通常処理
        if message == "診断開始":
            return start_mbti_diagnosis(user_id)
        elif message == "性別登録":
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET mode='register_gender' WHERE user_id=?", (user_id,))
            conn.commit()
            conn.close()
            return "性別を教えてね！【男】か【女】で答えてください。"
        elif message == "相手MBTI登録":
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET mode='register_partner_mbti' WHERE user_id=?", (user_id,))
            conn.commit()
            conn.close()
            return "相手のMBTIを教えてね！（例：INTJ、ENFP）"
        else:
            return process_ai_chat(user_id, message, user_profile)
    except Exception as e:
        import traceback
        print(f"process_user_message エラー: {e}")
        traceback.print_exc()
        return "エラーが発生しました。もう一度お試しください。"

# LINEリプライ送信関数
def send_line_reply(reply_token, message):
    """LINEにリプライメッセージを送信"""
    try:
        print(f"Sending LINE reply with token: {reply_token}")
        print(f"Message content: {message}")
        
        line_token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
        if not line_token:
            print("⚠️ LINE_CHANNEL_ACCESS_TOKENが設定されていません")
            return
        
        url = "https://api.line.me/v2/bot/message/reply"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {line_token}"
        }
        
        # メッセージが配列の場合は複数メッセージ
        if isinstance(message, list):
            data = {
                "replyToken": reply_token,
                "messages": message
            }
        # メッセージが辞書（テンプレート）の場合はそのまま使用
        elif isinstance(message, dict):
            data = {
                "replyToken": reply_token,
                "messages": [message]
            }
        else:
            # 文字列の場合は通常のテキストメッセージ
            data = {
                "replyToken": reply_token,
                "messages": [{"type": "text", "text": message}]
            }
        
        print(f"Sending request to LINE API: {url}")
        response = requests.post(url, headers=headers, json=data)
        print(f"LINE API response status: {response.status_code}")
        print(f"LINE API response: {response.text}")
        
        if response.status_code != 200:
            print(f"⚠️ LINE API error: {response.status_code} - {response.text}")
        
    except Exception as e:
        print(f"LINE送信エラー: {e}")

def classify_intent(message):
    """メッセージの意図を分類"""
    try:
        llm = ChatOpenAI(openai_api_key=openai_api_key)
        prompt = (
            "Classify the following message into one of these categories:\n"
            "1: Greeting (hello, hi, good morning, good evening, こんにちは, こんばんは, おはよう, おやすみ, おはよ, etc.)\n"
            "2: Thanks (thank you, thanks, ありがとう, どうも, etc.)\n"
            "3: Short reply (ok, yes, got it, わかった, うん, はい, 了解, etc.)\n"
            "4: Love advice (questions about love, dating, relationships, 恋愛, 相手, デート, 告白, etc.)\n"
            "5: Casual chat (weather, hobbies, daily conversation, 天気, 趣味, 日常会話, etc.)\n"
            "6: Other\n"
            "Return only the number (1-6)."
        )
        
        response = llm.invoke(f"{prompt}\n\nMessage: {message}")
        result = int(response.content.strip())
        
        # デバッグログを追加
        with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
            f.write(f"[classify_intent] message: {message}, response: {response.content}, result: {result}\n")
        
        return result
    except Exception as e:
        with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
            f.write(f"[classify_intent] error: {e}\n")
        return 6  # デフォルトは「その他」

def classify_question_type(question):
    """質問のタイプを詳細に分類"""
    try:
        llm = ChatOpenAI(openai_api_key=openai_api_key)
        prompt = (
            "以下の質問を最も適切なカテゴリに分類してください：\n"
            "1: 方法論・アプローチ (どうやって、どのように、方法、アプローチ、戦略)\n"
            "2: 原因分析・理由説明 (なぜ、理由、原因、どうして)\n"
            "3: タイミング・時期 (いつ、時期、タイミング、時期)\n"
            "4: 場所・デートプラン (どこで、場所、デート、プラン)\n"
            "5: 具体的な内容・アイデア (何を、内容、アイデア、提案)\n"
            "6: 感情・心理 (気持ち、感情、心理、不安)\n"
            "7: LINE・メッセージ (LINE、メッセージ、文例、返信)\n"
            "8: 関係性・告白 (関係、告白、距離、親密度)\n"
            "9: 一般的な相談 (全般、総合、アドバイス)\n"
            "数字のみで回答してください。"
        )
        
        response = llm.invoke(f"{prompt}\n\n質問: {question}")
        result = int(response.content.strip())
        
        # デバッグログを追加
        with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
            f.write(f"[classify_question_type] question: {question}, response: {response.content}, result: {result}\n")
        
        return result
    except Exception as e:
        with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
            f.write(f"[classify_question_type] error: {e}\n")
        return 9  # デフォルトは「一般的な相談」

def analyze_chat_history(history, user_profile):
    """チャット履歴を分析して洞察を提供"""
    try:
        if not history:
            return "初回の相談のため、過去の相談内容はありません。"
        
        # 履歴から主要なテーマを抽出
        themes = []
        if any("LINE" in msg or "メッセージ" in msg for msg in history):
            themes.append("LINE・メッセージ")
        if any("デート" in msg for msg in history):
            themes.append("デート・お出かけ")
        if any("告白" in msg for msg in history):
            themes.append("告白・関係性")
        if any("気持ち" in msg or "感情" in msg for msg in history):
            themes.append("感情・心理")
        if any("方法" in msg or "どうやって" in msg for msg in history):
            themes.append("方法論・アプローチ")
        if any("タイミング" in msg or "時期" in msg for msg in history):
            themes.append("タイミング・時期")
        if any("場所" in msg or "どこ" in msg for msg in history):
            themes.append("場所・デートプラン")
        if any("内容" in msg or "アイデア" in msg for msg in history):
            themes.append("具体的な内容・アイデア")
        if any("原因" in msg or "なぜ" in msg for msg in history):
            themes.append("原因分析・理由説明")
        
        # ユーザーの傾向を分析
        user_mbti = user_profile.get('mbti', '不明')
        personality = MBTI_PERSONALITY.get(user_mbti, {})
        
        # 相談の頻度と傾向を分析
        recent_count = len(history[-3:]) if len(history) >= 3 else len(history)
        is_frequent = recent_count >= 2
        
        # 感情的な傾向を分析
        emotional_keywords = ["不安", "心配", "悩み", "困る", "どうしよう", "怖い", "緊張"]
        is_emotional = any(keyword in msg for msg in history for keyword in emotional_keywords)
        
        # 実践的な傾向を分析
        practical_keywords = ["方法", "どうやって", "具体的", "実践", "ステップ"]
        is_practical = any(keyword in msg for msg in history for keyword in practical_keywords)
        
        # 成長傾向を分析
        growth_keywords = ["成長", "改善", "向上", "学ぶ", "経験"]
        is_growth_oriented = any(keyword in msg for msg in history for keyword in growth_keywords)
        
        analysis = f"""過去の相談内容から以下の傾向が見られます：

【相談テーマ】
• 主な相談テーマ: {', '.join(themes) if themes else '様々なテーマ'}
• 相談頻度: {'頻繁' if is_frequent else '適度'}
• 感情的な傾向: {'感情的な相談が多い' if is_emotional else '実践的な相談が多い'}
• 実践的な傾向: {'実践的な相談が多い' if is_practical else '理論的な相談が多い'}
• 成長志向: {'成長志向が強い' if is_growth_oriented else '現状維持志向'}

【あなたの特徴】
• 性格特徴: {', '.join(personality.get('traits', [])[:3])}
• よくある悩み: {', '.join(personality.get('common_concerns', [])[:2])}
• 恋愛スタイル: {personality.get('love_style', '個性的')}
• 強み: {', '.join(personality.get('strengths', [])[:2])}

【アドバイス方針】
• 過去の相談内容を踏まえて、より個性的で実践的なアドバイスを提供します
• あなたの性格の強みを活かしたアプローチを心がけます
• 継続的な改善と成長をサポートします
• 感情的なサポートと実践的なアドバイスのバランスを取ります"""
        
        return analysis
    except Exception as e:
        return "過去の相談内容を分析中です。"

def generate_compatibility_strategy(user_mbti, target_mbti, compatibility_notes):
    """相性に基づくアプローチ戦略を生成"""
    try:
        if user_mbti == '不明' or target_mbti == '不明':
            return "相性情報が不足しているため、一般的なアプローチを提案します。"
        
        # MBTI特性を取得
        user_traits = MBTI_PERSONALITY.get(user_mbti, {})
        target_traits = MBTI_PERSONALITY.get(target_mbti, {})
        
        # 相性に基づく戦略を生成
        if "とても相性が良い" in compatibility_notes:
            strategy = f"""【共通点を活かしたアプローチ】
• あなたの{user_traits.get('personality', '個性')}と相手の{target_traits.get('personality', '個性')}の共通点を活かしましょう
• 共通の価値観や興味を話題にした自然な会話を心がけましょう
• {target_traits.get('preferred_dates', '相手の好み')}を考慮したデートプランを提案しましょう

【具体的なアプローチ】
• 共通の趣味や関心事を話題にした自然な会話
• 共通の価値観を活かしたデートプランの提案
• お互いの個性を活かした新しい体験の共有

【注意点】
• 共通点に依存しすぎず、個性も大切にする
• 新しい体験や挑戦も取り入れて関係に刺激を与える"""
        
        elif "バランスの取れた相性" in compatibility_notes:
            strategy = f"""【バランスを活かしたアプローチ】
• あなたの{user_traits.get('personality', '特徴')}と相手の{target_traits.get('personality', '特徴')}のバランスを活かしましょう
• 共通点を基盤とし、違いを楽しむ関係を築きましょう
• {target_traits.get('line_communication', '相手のコミュニケーション傾向')}を理解したアプローチを心がけましょう

【具体的なアプローチ】
• 共通点を話題にしつつ、お互いの個性も活かした会話
• 相手の好みを考慮しつつ、自分の特徴も活かしたアプローチ
• お互いの違いを理解し、補完し合える関係の構築

【戦略】
• 共通点を基盤とし、違いを刺激として活用
• お互いの特徴を理解し、補完し合える関係を目指す"""
        
        elif "補完し合える相性" in compatibility_notes:
            strategy = f"""【違いを活かしたアプローチ】
• あなたの{user_traits.get('personality', '特徴')}と相手の{target_traits.get('personality', '特徴')}の違いを活かしましょう
• 相手の視点を深く理解し、相手の好みに合わせたアプローチを心がけましょう
• {target_traits.get('line_communication', '相手のコミュニケーション傾向')}を考慮したメッセージを送りましょう

【具体的なアプローチ】
• 相手の特徴を深く理解し、相手の好みに合わせたアプローチ
• お互いの違いを刺激として、成長し合える関係の構築
• 相手の視点を理解し、相手の特徴を活かしたコミュニケーション

【戦略】
• 相手の特徴を深く理解し、相手の好みに合わせたアプローチ
• お互いの違いを刺激として、成長し合える関係を築く
• 相手の視点を理解し、相手の特徴を活かしたアプローチ"""
        
        else:  # 刺激的な相性
            strategy = f"""【刺激的な相性を活かしたアプローチ】
• あなたの{user_traits.get('personality', '特徴')}と相手の{target_traits.get('personality', '特徴')}の違いを特に活かしましょう
• 相手の視点を深く理解し、相手の好みに合わせたアプローチが特に重要です
• {target_traits.get('line_communication', '相手のコミュニケーション傾向')}を理解したメッセージを心がけましょう

【具体的なアプローチ】
• 相手の特徴を深く理解し、相手の好みに合わせたアプローチ
• お互いの違いを刺激として、成長し合える関係の構築
• 相手の視点を深く理解し、相手の特徴を活かしたコミュニケーション
• 長期的な視点で、お互いの成長を促進する関係を築く

【戦略】
• 相手の特徴を深く理解し、相手の好みに合わせたアプローチ
• お互いの違いを刺激として、成長し合える関係を築く
• 長期的には非常に充実した関係を築ける可能性があります"""
        
        return strategy
    except Exception as e:
        return "相性に基づく戦略を生成中です。"

def handle_emotional_support(user_id, message, user_profile):
    """感情的なサポート・慰め処理"""
    try:
        llm = ChatOpenAI(openai_api_key=openai_api_key)
        prompt = (
            f"あなたはMBTI診断ベースの女性の恋愛マスターの友達です。\n"
            f"ユーザー情報: あなたのMBTI: {user_profile.get('mbti', '不明')}, あなたの性別: {user_profile.get('gender', '不明')}\n"
            f"ユーザーの発言: {message}\n"
            f"ユーザーは今つらい気持ちや悲しい気持ちを表現しています。\n"
            f"アドバイスではなく、まずは共感と慰めを心がけてください。\n"
            f"親しみやすくタメ口で絵文字も使って、短めに（150文字以内）返してください。\n"
            f"具体的な解決策は求めず、気持ちに寄り添うことを最優先にしてください。"
        )
        
        response = llm.invoke(prompt)
        return response.content
    except Exception as e:
        return "つらかったね💕 あなたの気持ち、よくわかるよ✨"

def handle_casual_chat(user_id, message, user_profile):
    """雑談処理"""
    try:
        llm = ChatOpenAI(openai_api_key=openai_api_key)
        prompt = (
            f"あなたはMBTI診断ベースの女性の恋愛マスターの友達です。\n"
            f"ユーザー情報: あなたのMBTI: {user_profile.get('mbti', '不明')}, あなたの性別: {user_profile.get('gender', '不明')}\n"
            f"ユーザーの発言: {message}\n"
            f"これは雑談です。親しみやすくタメ口で絵文字も使って、短めに（100文字以内）返してください。\n"
            f"恋愛アドバイスではなく、日常会話として返してください。"
        )
        
        response = llm.invoke(prompt)
        return response.content
    except Exception as e:
        return "うん、そうだね！😊"

# AIチャット処理関数
def process_ai_chat(user_id, message, user_profile):
    os.makedirs("/data/logs", exist_ok=True)
    with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
        f.write(f"[process_ai_chat] user_id={user_id}, message={message}, user_profile={user_profile}\n")
    try:
        if user_profile.get('is_paid', False):
            with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
                f.write("[process_ai_chat] is_paid True, calling intent classification\n")
            
            # 意図分類
            intent = classify_intent(message)
            with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
                f.write(f"[process_ai_chat] intent classified as: {intent}\n")
            
            if intent == 1:  # 挨拶
                return "こんばんは！今日も気軽に話してね😊"
            elif intent == 2:  # 感謝
                return "どういたしまして！また何でも聞いてね✨"
            elif intent == 3:  # 短い返事
                return "うん、また何かあったら教えてね！"
            elif intent == 4:  # 恋愛相談
                # 慰めや共感が必要かどうかを判定
                if any(word in message for word in ["つらい", "悲しい", "落ち込んでる", "辛い", "しんどい", "疲れた", "嫌だ", "もう嫌", "諦め", "無理"]):
                    return handle_emotional_support(user_id, message, user_profile)
                
                # 質問タイプを分類
                question_type_num = classify_question_type(message)
                question_types = [
                    "方法論・アプローチ",
                    "原因分析・理由説明", 
                    "タイミング・時期",
                    "場所・デートプラン",
                    "具体的な内容・アイデア",
                    "感情・心理",
                    "LINE・メッセージ",
                    "関係性・告白",
                    "一般的な相談"
                ]
                question_type = question_types[question_type_num - 1] if 1 <= question_type_num <= 9 else "一般的な相談"
                
                return ask_ai_with_vector_db(user_id, message, user_profile, question_type)
            elif intent == 5:  # 雑談
                return handle_casual_chat(user_id, message, user_profile)
            else:  # その他（恋愛相談として処理）
                # 慰めや共感が必要かどうかを判定
                if any(word in message for word in ["つらい", "悲しい", "落ち込んでる", "辛い", "しんどい", "疲れた", "嫌だ", "もう嫌", "諦め", "無理"]):
                    return handle_emotional_support(user_id, message, user_profile)
                
                # 質問タイプを分類
                question_type_num = classify_question_type(message)
                question_types = [
                    "方法論・アプローチ",
                    "原因分析・理由説明", 
                    "タイミング・時期",
                    "場所・デートプラン",
                    "具体的な内容・アイデア",
                    "感情・心理",
                    "LINE・メッセージ",
                    "関係性・告白",
                    "一般的な相談"
                ]
                question_type = question_types[question_type_num - 1] if 1 <= question_type_num <= 9 else "一般的な相談"
                
                return ask_ai_with_vector_db(user_id, message, user_profile, question_type)
        
        with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
            f.write("[process_ai_chat] is_paid False or not found\n")
        if "こんにちは" in message or "hello" in message.lower():
            with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
                f.write("[process_ai_chat] greeting branch\n")
            return "こんにちは！恋愛の相談があるときはいつでも聞いてね💕"
        elif "ありがとう" in message:
            with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
                f.write("[process_ai_chat] thanks branch\n")
            return "どういたしまして！他にも恋愛の悩みがあれば気軽に相談してね✨"
        else:
            with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
                f.write("[process_ai_chat] default advice branch\n")
            return f"【{user_profile.get('mbti', '不明')}タイプ】のあなたへのアドバイス：\n{message}について詳しく教えてくれると、もっと具体的なアドバイスができるよ！"
    except Exception as e:
        import traceback
        with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
            f.write(f"[process_ai_chat] Exception: {e}\n")
            f.write(traceback.format_exc() + "\n")
        traceback.print_exc()
        return "申し訳ありません。エラーが発生しました。時間を置いて再度お試しください。"

# LINE Webhookエンドポイント
@app.route("/webhook", methods=["POST"])
def line_webhook():
    os.makedirs("/data/logs", exist_ok=True)
    with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
        f.write("[line_webhook] called\n")
    try:
        # LINEプラットフォームからのリクエストを受け取る
        data = request.get_json()
        print(f"LINE Webhook received: {data}")
        
        # LINE Webhookの検証（LINEプラットフォームからの検証リクエスト）
        if 'events' not in data:
            print("No events in data, returning 200")
            return '', 200
        
        print(f"Processing {len(data['events'])} events")
        
        # イベントを処理
        for event in data['events']:
            print(f"Processing event: {event}")
            
            # テキストメッセージの処理
            if event['type'] == 'message' and event['message']['type'] == 'text':
                user_id = event['source']['userId']
                user_message = event['message']['text'].strip()
                reply_token = event['replyToken']
                
                print(f"User ID: {user_id}")
                print(f"User message: {user_message}")
                
                # ユーザープロファイルを取得
                user_profile = get_user_profile(user_id)
                print(f"User profile: {user_profile}")
                
                # メッセージを処理
                response_message = process_user_message(user_id, user_message, user_profile)
                print(f"Response message: {response_message}")
                
                # LINEにリプライを送信
                send_line_reply(reply_token, response_message)
            
            # ボタンクリック（postback）の処理
            elif event['type'] == 'postback':
                user_id = event['source']['userId']
                postback_data = event['postback']['data']
                reply_token = event['replyToken']
                
                print(f"Postback from user_id: {user_id}")
                print(f"Postback data: {postback_data}")
                
                # MBTI回答の処理
                if postback_data.startswith('mbti_answer:'):
                    parts = postback_data.split(':')
                    if len(parts) == 3:
                        answer = "はい" if parts[1] == "yes" else "いいえ"
                        question_index = int(parts[2])
                        
                        # ユーザープロファイルを取得
                        user_profile = get_user_profile(user_id)
                        
                        # Bot側の吹き出しで「あなたの回答：はい/いいえ」を表示
                        bot_answer_message = f"あなたの回答：{answer}"
                        send_line_reply(reply_token, bot_answer_message)
                        
                        # 少し遅延させてから次の質問を処理（スピードアップ）
                        import threading
                        import time
                        
                        def process_next_question():
                            time.sleep(0.5)  # 0.5秒に短縮
                            # MBTI回答を処理
                            response_message = process_mbti_answer(user_id, answer, user_profile)
                            print(f"MBTI response: {response_message}")
                            
                            # 次の質問または診断完了を送信
                            line_token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
                            if line_token:
                                url = "https://api.line.me/v2/bot/message/push"
                                headers = {
                                    "Content-Type": "application/json",
                                    "Authorization": f"Bearer {line_token}"
                                }
                                
                                # メッセージが辞書（テンプレート）の場合はそのまま使用
                                if isinstance(response_message, dict):
                                    data = {
                                        "to": user_id,
                                        "messages": [response_message]
                                    }
                                else:
                                    # 文字列の場合は通常のテキストメッセージ
                                    data = {
                                        "to": user_id,
                                        "messages": [{"type": "text", "text": response_message}]
                                    }
                                
                                response = requests.post(url, headers=headers, json=data)
                                print(f"Next question sent: {response.status_code}")
                                
                                # 診断完了の場合、課金誘導メッセージを別途送信
                                if "診断完了" in str(response_message):
                                    time.sleep(1)  # 1秒に短縮
                                    payment_message = get_payment_message(user_id)
                                    send_line_reply(reply_token, payment_message)
                        
                        threading.Thread(target=process_next_question).start()
        
        return '', 200
        
    except Exception as e:
        print(f"LINE Webhook error: {e}")
        return '', 200

# 課金完了Webhookエンドポイント
@app.route("/payment_webhook", methods=["POST"])
def payment_webhook():
    """課金完了時のWebhook"""
    try:
        data = request.get_json()
        user_id = data.get('userId')
        
        if user_id:
            handle_payment_completion(user_id)
            return jsonify({"status": "success"}), 200
        else:
            return jsonify({"error": "userId required"}), 400
            
    except Exception as e:
        print(f"Payment webhook error: {e}")
        return jsonify({"error": str(e)}), 500

# 環境変数確認用エンドポイント
@app.route("/env_test", methods=["GET"])
def env_test():
    """環境変数の設定状況を確認"""
    env_vars = {
        "OPENAI_API_KEY": "SET" if os.getenv("OPENAI_API_KEY") else "NOT SET",
        "STRIPE_SECRET_KEY": "SET" if os.getenv("STRIPE_SECRET_KEY") else "NOT SET",
        "STRIPE_PRICE_ID": "SET" if os.getenv("STRIPE_PRICE_ID") else "NOT SET",
        "STRIPE_WEBHOOK_SECRET": "SET" if os.getenv("STRIPE_WEBHOOK_SECRET") else "NOT SET",
        "LINE_CHANNEL_ACCESS_TOKEN": "SET" if os.getenv("LINE_CHANNEL_ACCESS_TOKEN") else "NOT SET",
        "LINE_CHANNEL_SECRET": "SET" if os.getenv("LINE_CHANNEL_SECRET") else "NOT SET",
        "GAS_NOTIFY_URL": "SET" if os.getenv("GAS_NOTIFY_URL") else "NOT SET"
    }
    return jsonify(env_vars)

# ルートエンドポイント
@app.route("/", methods=["GET"])
def root():
    return "LINE MBTI診断ボットが動作中です！"

@app.route("/return", methods=["GET"])
def return_page():
    return "<h1>決済が完了しました！LINEに戻ってサービスをご利用ください。</h1>"

@app.route("/success", methods=["GET"])
def success_page():
    return "<h1>決済が完了しました🎉 LINEに戻ってください！</h1>"

@app.route("/cancel", methods=["GET"])
def cancel_page():
    return "<h1>決済をキャンセルしました。</h1>"

@app.route("/mbti_collect", methods=["POST"])
def mbti_collect():
    data = request.get_json()
    user_id = data.get("userId")
    gender = data.get("gender")
    target_mbti = data.get("targetMbti", "不明")
    answers = data.get("answers", [])

    if not user_id or len(answers) != 16:
        return jsonify({"error": "userIdと16個の回答が必要です"}), 400

    score = {"E":0, "I":0, "S":0, "N":0, "T":0, "F":0, "J":0, "P":0}
    mapping = [
        ("E", "I"), ("E", "I"), ("I", "E"), ("I", "E"),
        ("S", "N"), ("S", "N"), ("N", "S"), ("N", "S"),
        ("T", "F"), ("T", "F"), ("F", "T"), ("F", "T"),
        ("J", "P"), ("J", "P"), ("P", "J"), ("P", "J")
    ]
    for i, (yes_key, no_key) in enumerate(mapping):
        ans = answers[i]
        if ans in [1, True, "1", "はい", "yes"]:
            score[yes_key] += 1
        else:
            score[no_key] += 1

    mbti = ""
    mbti += "E" if score["E"] >= score["I"] else "I"
    mbti += "S" if score["S"] >= score["N"] else "N"
    mbti += "T" if score["T"] >= score["F"] else "F"
    mbti += "J" if score["J"] >= score["P"] else "P"

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        REPLACE INTO users (user_id, mbti, gender, target_mbti, is_paid)
        VALUES (?, ?, ?, ?, 0)
    ''', (user_id, mbti, gender, target_mbti))
    conn.commit()
    conn.close()

    # result_messageとpayment_messageも返す
    result_message = f"🔍診断完了っ！\n\nあなたの恋愛タイプは…\n❤️{MBTI_NICKNAME.get(mbti, mbti)}❤️\n\n{get_mbti_description(mbti)}"
    payment_message = get_payment_message(user_id)

    return jsonify({
        "mbti": mbti,
        "result_message": result_message,
        "payment_message": payment_message
    })

@app.route("/stripe_webhook", methods=["POST"])
def stripe_webhook():
    payload = request.data
    sig_header = request.headers.get("stripe-signature")
    endpoint_secret = os.getenv("STRIPE_WEBHOOK_SECRET")

    try:
        event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)
        print("🧾 Stripe イベントタイプ:", event["type"])
    except Exception as e:
        print(f"Webhook error: {e}")
        return "Webhook error", 400

    # 決済完了イベント時の処理
    if event["type"] in ["invoice.payment_succeeded", "checkout.session.completed"]:
        # user_idを特定
        obj = event["data"]["object"]
        user_id = None
        customer_id = None
        
        # checkout.session.completedの場合
        if "metadata" in obj and "user_id" in obj["metadata"]:
            user_id = obj["metadata"]["user_id"]
            customer_id = obj.get("customer")
        # invoice.payment_succeededの場合（customer_idからuser_idを逆引き）
        elif "customer" in obj:
            customer_id = obj["customer"]
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM stripe_customers WHERE customer_id=?", (customer_id,))
            row = cursor.fetchone()
            if row:
                user_id = row[0]
            conn.close()
        
        if user_id:
            # stripe_customersテーブルにデータを保存（まだ存在しない場合のみ）
            if customer_id:
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                cursor.execute("INSERT OR IGNORE INTO stripe_customers (user_id, customer_id) VALUES (?, ?)", (user_id, customer_id))
                conn.commit()
                conn.close()
                print(f"✅ stripe_customersテーブルに保存: user_id={user_id}, customer_id={customer_id}")
            
            handle_payment_completion(user_id)
            print(f"✅ 決済完了処理実行: user_id={user_id}")
        else:
            print("⚠️ user_idが特定できませんでした")
    return "OK", 200

# --- PDF/LLM連携AI応答用の補助関数 ---
def save_message(user_id, role, content):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO messages (user_id, role, content) VALUES (?, ?, ?)", (user_id, role, content))
    conn.commit()
    conn.close()

def get_recent_history(user_id, limit=5):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT role, content FROM messages WHERE user_id=? ORDER BY rowid DESC LIMIT ?", (user_id, limit))
    rows = cursor.fetchall()
    conn.close()
    return [f"{row[0]}: {row[1]}" for row in reversed(rows)]

# PDFベクトルDBからRetrieverを取得
VECTOR_BASE = "chroma_db"
def get_retrievers(user_profile):
    import os
    sub_paths = []

    # self/MBTI
    if user_profile.get('mbti') and user_profile['mbti'] not in [None, '', '不明']:
        sub_paths.append(f"self/{user_profile['mbti']}")

    # partner/MBTI
    if user_profile.get('target_mbti') and user_profile['target_mbti'] not in [None, '', '不明']:
        sub_paths.append(f"partner/{user_profile['target_mbti']}")

    # gender
    if user_profile.get('gender') == '男':
        sub_paths.append("man")
    elif user_profile.get('gender') == '女':
        sub_paths.append("woman")

    # common（必ず）
    sub_paths.append("common")

    retrievers = []
    for sub in sub_paths:
        base_path = os.path.join(VECTOR_BASE, sub)
        if os.path.exists(base_path):
            # PDFごとの全ディレクトリを対象にする
            for pdf_dir in os.listdir(base_path):
                pdf_path = os.path.join(base_path, pdf_dir)
                if os.path.isdir(pdf_path):
                    retrievers.append(
                        Chroma(persist_directory=pdf_path, embedding_function=OpenAIEmbeddings()).as_retriever()
                    )
    return retrievers

def get_qa_chain(user_profile):
    retrievers = get_retrievers(user_profile)
    print("retrievers len:", len(retrievers))
    if not retrievers:
        raise ValueError("該当するベクトルDBが見つかりません")
    retriever = retrievers[0]
    print("=== retriever type:", type(retriever), "===")
    print("=== retriever repr:", repr(retriever), "===")
    with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
        f.write(f"retriever type: {type(retriever)}\n")
    llm = ChatOpenAI(openai_api_key=openai_api_key)
    return RetrievalQA.from_chain_type(llm=llm, retriever=retriever), llm

# --- AI質問受付エンドポイント ---
@app.route("/ask", methods=["POST"])
def ask():
    data = request.get_json()
    user_id = data.get("userId")
    question = data.get("question", "")
    profile = get_user_profile(user_id)
    if not question:
        return jsonify({"error": "質問が空です"}), 400
    if not profile["is_paid"]:
        return "", 204
    answer = ask_ai_with_vector_db(user_id, question, profile)
    return jsonify({"answer": answer})

@app.route("/upload_db", methods=["POST"])
def upload_db():
    """一時的なデータベースアップロードエンドポイント"""
    if 'file' not in request.files:
        return jsonify({"error": "ファイルがありません"}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "ファイルが選択されていません"}), 400
    
    if file.filename != 'user_data.db':
        return jsonify({"error": "user_data.dbファイルのみアップロード可能です"}), 400
    
    try:
        # 永続ディスクに保存
        file.save('/data/user_data.db')
        return jsonify({"message": "データベースファイルが正常にアップロードされました"}), 200
    except Exception as e:
        return jsonify({"error": f"アップロードエラー: {str(e)}"}), 500

# --- AI応答ロジックを関数化 ---
def ask_ai_with_vector_db(user_id, question, user_profile, question_type="一般的な相談"):
    os.makedirs("/data/logs", exist_ok=True)
    with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
        f.write(f"[ask_ai_with_vector_db] user_id={user_id}, question={question}, user_profile={user_profile}\n")
    if not question:
        with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
            f.write("[ask_ai_with_vector_db] question is empty\n")
        return "質問が空です"
    if not user_profile.get("is_paid"):
        with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
            f.write("[ask_ai_with_vector_db] user is not paid\n")
        return "有料会員のみ利用できます"
    history = get_recent_history(user_id)
    try:
        llm = ChatOpenAI(openai_api_key=openai_api_key)
        
        # パーソナライズされたアドバイスコンテキストを生成
        personality_context = generate_personalized_advice(user_profile, question, history, question_type)
        
        # より詳細で構造化されたプロンプトを構築
        prompt = f"""
{personality_context}

【チャット履歴】
{chr(10).join(history) if history else "初回の相談です"}

【履歴分析】
{analyze_chat_history(history, user_profile) if history else "初回の相談のため、過去の相談内容はありません。"}

【ユーザーの質問】
{question}

【回答の品質向上のための指示】
1. **自然な会話**: 友達がアドバイスしているような自然な会話の流れを心がけてください
2. **親しみやすい表現**: 「あなた」「君」と呼びかけ、タメ口で絵文字を適度に使用してください
3. **具体的で実践的**: 抽象的なアドバイスではなく、すぐに実行できる具体的なステップを提供してください
4. 絶対にあなたのMBTIの特徴と相手の特徴に合わせたアプローチを提案してください。
5. **感情に寄り添う**: 相手の気持ちを理解し、共感を示しながらアドバイスしてください。
6. **リスク管理**: 失敗した場合の対処法も含めてアドバイスしてください
7. **絶対にMBTI名を回答に含めない**: ENTJ、INFPなどのMBTI名は使用しないでください
8. **構造化**: 改行を効果的に使用して読みやすく構造化してください
9. 必要であれば実際のLINEの例文やシナリオを具体的に示してください
10. **個性的な表現**: 毎回異なる視点やアプローチを提供してください
11. **自己肯定感**: 自己肯定感を高めるアドバイスも含めてください
12. **堅苦しい言葉を避ける**: 専門用語や堅苦しい表現は避け、親しみやすい言葉を使ってください
13. **感情的な表現**: 共感や励ましを含めた感情的な表現を心がけてください

【重要】絶対にMBTI名（ENTJ、INFPなど）を回答に含めないでください。
"""
        
        answer = llm.invoke(prompt).content
        with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
            f.write(f"[ask_ai_with_vector_db] LLM only answer: {answer}\n")
        save_message(user_id, "user", question)
        save_message(user_id, "bot", answer)
        return answer
    except Exception as e:
        import traceback
        with open("/data/logs/debug.log", "a", encoding="utf-8") as f:
            f.write(f"[ask_ai_with_vector_db] Exception: {e}\n")
            f.write(traceback.format_exc() + "\n")
        traceback.print_exc()
        return "AI応答中にエラーが発生しました。"

# MBTI別のパーソナライズされたアドバイス生成関数
def generate_personalized_advice(user_profile, question, history, question_type="一般的な相談"):
    """MBTI別の性格特徴を活用したパーソナライズされたアドバイスを生成"""
    import random
    
    user_mbti = user_profile.get('mbti', '不明')
    user_gender = user_profile.get('gender', '不明')
    target_mbti = user_profile.get('target_mbti', '不明')
    
    # ユーザーと相手のMBTI情報を取得
    user_personality = MBTI_PERSONALITY.get(user_mbti, {})
    target_personality = MBTI_PERSONALITY.get(target_mbti, {})
    user_nickname = MBTI_NICKNAME.get(user_mbti, "恋愛探検家")
    target_nickname = MBTI_NICKNAME.get(target_mbti, "恋愛相手")
    
    # mbti_advice.jsonから詳細なアドバイスを取得
    try:
        with open('mbti_advice.json', 'r', encoding='utf-8') as f:
            mbti_advice_data = json.load(f)
        user_detailed_advice = mbti_advice_data.get(user_mbti, "")
        target_detailed_advice = mbti_advice_data.get(target_mbti, "")
    except:
        user_detailed_advice = ""
        target_detailed_advice = ""
    
    # レスポンススタイルを決定（より自然で親しみやすい形式）
    response_styles = [
        "bullet_points",      # 箇条書き
        "story_format",       # 物語形式
        "dialogue_format",    # 対話形式
        "step_by_step",       # ステップ形式
        "comparison",         # 比較形式
        "emotional",          # 感情重視
        "tips_format",        # ティップス形式
        "qa_format",          # Q&A形式
        "scenario_format",    # シナリオ形式
        "checklist_format",   # チェックリスト形式
        "timeline_format",    # タイムライン形式
        "pros_cons_format",   # メリット・デメリット形式
        "case_study_format",  # ケーススタディ形式
        "mindmap_format",     # マインドマップ形式
        "action_plan_format"  # アクションプラン形式
    ]
    
    # ユーザーのMBTIに基づいてレスポンススタイルを選択（より詳細で個性的）
    if user_mbti in ["INTJ", "INTP"]:  # 分析的な思考者
        preferred_styles = ["bullet_points", "step_by_step", "comparison", "pros_cons_format", "case_study_format"]
    elif user_mbti in ["ENTJ", "ESTJ"]:  # 決断力のあるリーダー
        preferred_styles = ["action_plan_format", "checklist_format", "step_by_step", "bullet_points", "timeline_format"]
    elif user_mbti in ["INFJ", "INFP"]:  # 理想主義者
        preferred_styles = ["story_format", "emotional", "scenario_format", "mindmap_format", "dialogue_format"]
    elif user_mbti in ["ENFJ", "ENFP"]:  # 社交的な理想主義者
        preferred_styles = ["dialogue_format", "story_format", "emotional", "scenario_format", "qa_format"]
    elif user_mbti in ["ISTJ", "ISFJ"]:  # 実務的な保守主義者
        preferred_styles = ["checklist_format", "step_by_step", "bullet_points", "timeline_format", "tips_format"]
    elif user_mbti in ["ESFJ"]:  # 社交的な実務家
        preferred_styles = ["dialogue_format", "tips_format", "checklist_format", "story_format", "qa_format"]
    elif user_mbti in ["ISTP", "ISFP"]:  # 実践的な冒険者
        preferred_styles = ["action_plan_format", "scenario_format", "step_by_step", "tips_format", "bullet_points"]
    elif user_mbti in ["ESTP", "ESFP"]:  # 社交的な冒険者
        preferred_styles = ["scenario_format", "dialogue_format", "action_plan_format", "story_format", "tips_format"]
    else:  # デフォルト
        preferred_styles = ["dialogue_format", "story_format", "emotional", "qa_format", "tips_format"]
    
    style = random.choice(preferred_styles)
    
    # 詳細な相性分析
    compatibility_notes = ""
    if user_mbti != '不明' and target_mbti != '不明':
        # 同じ機能（E/I, S/N, T/F, J/P）の組み合わせで相性を判定
        user_functions = [user_mbti[0], user_mbti[1], user_mbti[2], user_mbti[3]]
        target_functions = [target_mbti[0], target_mbti[1], target_mbti[2], target_mbti[3]]
        
        matching_count = sum(1 for u, t in zip(user_functions, target_functions) if u == t)
        
        # より詳細な相性分析
        if matching_count >= 3:
            compatibility_notes = f"""✨ あなたと相手はとても相性が良い組み合わせだよ！
共通点が多いから、自然に理解し合える関係を築けそう。
あなたの強みと相手の好みがピッタリ合ってる可能性が高いから、安心してアプローチして大丈夫！
ただし、刺激が少なくなる可能性もあるから、適度な変化も大切にしてね。"""
        elif matching_count == 2:
            compatibility_notes = f"""😊 バランスの取れた相性だね！
共通点と違いのバランスが良くて、お互いを成長させ合えそう。
あなたの特徴と相手の好みが部分的に合致してるから、相手の特徴を理解して適切なアプローチを心がけることが大切だよ。
お互いの違いを尊重しながら、共通点を活かした関係を築いていこう！"""
        elif matching_count == 1:
            compatibility_notes = f"""🤝 補完し合える相性だよ！
お互いの違いが刺激になって、成長し合える関係になりそう。
あなたの特徴と相手の好みが異なるから、相手の視点を理解することが重要だね。
相手の特徴を活かしたアプローチが効果的だから、お互いの違いを楽しみながら理解を深めていこう！"""
        else:
            compatibility_notes = f"""💫 刺激的な相性だね！
お互いの違いが大きな刺激になって、新しい発見がたくさんありそう。
あなたの特徴と相手の好みが大きく異なるから、相手の視点を深く理解する必要があるよ。
相手の特徴を活かしたアプローチが特に重要だから、お互いの違いを楽しみながら理解を深めていこう！
長期的には非常に充実した関係を築ける可能性があるから、焦らずに進めていってね。"""
    
    # パーソナライズされたプロンプトを構築
    personality_context = f"""
あなたは{user_nickname}の恋愛マスターの女友達です。

【最重要指示】
- 絶対に敬語を使わないでください。「です・ます」ではなく「だよ・ね」を使う
- 相手の特徴を最優先で考慮したアドバイスをしてください
- 相手の好み、嫌いなこと、性格を深く理解してからアドバイスしてください
- 絶対にMBTI名（INTJ、INTP、ENTJなど）を回答に含めないでください
- 友達感覚で自然なタメ口で話してください
- 相手へのアプローチ方法を説明する時も絶対に敬語を使わないでください
- 箇条書きや説明文でも「〜しましょう」「〜してください」ではなく「〜してね」「〜してみて」を使う
- 絵文字は積極的に使う

【ユーザーの特徴】
• MBTI: {user_mbti}
• 性別: {user_gender}
• 性格特徴: {', '.join(user_personality.get('traits', []))}
• 恋愛スタイル: {user_personality.get('love_style', '')}
• 恋愛での強み: {', '.join(user_personality.get('strengths', []) + user_personality.get('relationship_strengths', []))}
• 恋愛での弱み: {', '.join(user_personality.get('challenges', []) + user_personality.get('relationship_challenges', []))}
• 関係の障害: {', '.join(user_personality.get('relationship_hurdles', []))}
• 自分のアプローチ方法: {', '.join(user_personality.get('my_approaches', []))}
• 理想のパートナーの特徴: {', '.join(user_personality.get('desired_partner_traits', []))}
• 成功する関係の鍵: {', '.join(user_personality.get('keys_to_successful_relationships', []))}
• 注意すべきポイント: {', '.join(user_personality.get('points_to_watch_out_for', []))}

【相手の特徴（最重要）】
• MBTI: {target_mbti}
• ニックネーム: {target_nickname}
• 性格特徴: {', '.join(target_personality.get('traits', []))}
• 恋愛スタイル: {target_personality.get('love_style', '')}
• 恋愛での強み: {', '.join(target_personality.get('strengths', []) + target_personality.get('relationship_strengths', []))}
• 恋愛での弱み: {', '.join(target_personality.get('challenges', []) + target_personality.get('relationship_challenges', []))}
• 関係の障害: {', '.join(target_personality.get('relationship_hurdles', []))}
• このタイプにやってはいけない行動: {', '.join(user_personality.get('ng_behaviors', []))}
• このタイプと距離を縮める方法: {', '.join(user_personality.get('how_to_close_distance', []))}
• 好きな異性のタイプ: {', '.join(target_personality.get('likes_in_partner', []))}
• 苦手な異性のタイプ: {', '.join(target_personality.get('dislikes_in_partner', []))}
• このタイプの人へのアプローチ方法: {', '.join(target_personality.get('partner_approaches', []))}
• このタイプの人へのNGアプローチ: {', '.join(target_personality.get('partner_ng_behaviors', []))}
• 好きなデート: {', '.join(target_personality.get('favorite_dates', []))}
• LINEの傾向: {', '.join(target_personality.get('line_tendencies', []))}
• LINEメッセージテンプレート: {', '.join(target_personality.get('line_message_templates', []))}
• LINEの例: {', '.join(target_personality.get('line_examples', []))}
• 脈ありサイン: {', '.join(target_personality.get('romantic_signs', []))}
• デート誘い文句例: {', '.join(target_personality.get('date_invitations', []))}
• 告白の言葉例: {', '.join(target_personality.get('confession_examples', []))}
• 効果的な告白のタイミング: {target_personality.get('confession_timing', '')}
• 告白のポイント: {', '.join(target_personality.get('key_points_for_confession', []))}
• 告白のNGポイント: {', '.join(target_personality.get('ng_points_for_confession', []))}
• 嫌いな行動: {', '.join(target_personality.get('disliked_ng_behaviors', []))}
• 嫌いな人の特徴: {', '.join(target_personality.get('disliked_people_characteristics', []))}


【相性分析】
{compatibility_notes}

【相性に基づくアプローチ戦略】
{generate_compatibility_strategy(user_mbti, target_mbti, compatibility_notes)}

【質問タイプ】
{question_type}

【質問タイプ別イントロ】
{get_random_response_pattern("advice_intro", user_profile, question_type) if 'get_random_response_pattern' in globals() else ""}

【レスポンススタイル】
{style}で回答してください。

【回答品質向上のための指示】
1. **敬語完全禁止**: 絶対に敬語を使わないでください。「です・ます」ではなく「だよ・ね」を使う
2. **MBTI名完全禁止**: 絶対にMBTI名（INTJ、INTP、ENTJなど）を回答に含めないでください
3. **友達感覚**: 友達がアドバイスしているような自然な会話の流れを心がけてください
4. **親しみやすい表現**: 「あなた」「君」と呼びかけ、タメ口で絵文字を適度に使用してください
5. **具体的で実践的**: 抽象的なアドバイスではなく、すぐに実行できる具体的なステップを提供してください
6. **相手の特徴活用**: 相手の特徴、好み、嫌いなことを最優先で考慮したアドバイスをしてください
7. **感情に寄り添う**: 相手の気持ちを理解し、共感を示しながらアドバイスしてください
8. **リスク管理**: 失敗した場合の対処法も含めてアドバイスしてください
9. **構造化**: 改行を効果的に使用して読みやすく構造化してください
10. **具体例**: 必要に応じて実際のLINEの例文やシナリオを具体的に示してください
11. **個性的な表現**: 毎回異なる視点やアプローチを提供してください
12. **自己肯定感**: 自己肯定感を高めるアドバイスも含めてください
13. **堅苦しい言葉を避ける**: 専門用語や堅苦しい表現は避け、親しみやすい言葉を使ってください
14. **感情的な表現**: 共感や励ましを含めた感情的な表現を心がけてください
15. **箇条書きを避ける**: 箇条書きではなく、自然な文章で流れるように説明してください
16. 絵文字は積極的に使う

【重要】絶対にMBTI名（ENTJ、INFPなど）を回答に含めないでください。

【最終チェックリスト】
□ 敬語を使っていない（「です・ます」ではなく「だよ・ね」を使っている）
□ MBTI名を回答に含めていない
□ 相手へのアドバイス文でも敬語を使っていない
□ 箇条書きや説明文でも「〜しましょう」ではなく「〜してね」を使っている
□ 最初から最後まで一貫してタメ口で話している
□ 女友達みたいな口調で絵文字がたくさん含まれているか
"""

    
    return personality_context

# 豊富なレスポンスパターンの定義
RESPONSE_PATTERNS = {
    "greeting": [
        "こんにちは！あなた、今日も恋愛について相談したいことがあるの？😊",
        "やっほー！何か恋愛の悩みでもある？💕",
        "お疲れさま！恋愛について話したいことがあればいつでも聞くよ〜✨",
        "こんばんは！今日はどんな恋愛の相談があるの？🌟",
        "はーい！恋愛について何でも聞いてね〜😄",
        "こんにちは〜！恋愛の相談、待ってるよ〜💖",
        "やっほー！今日も恋愛について話そう〜😊",
        "お疲れさま〜！恋愛の悩み、一緒に解決していこう〜✨"
    ],
    "thanks": [
        "どういたしまして！あなたの恋愛がうまくいくことを願ってるよ〜💖",
        "いえいえ！あなたが幸せになれるように全力でサポートするからね〜✨",
        "ありがとう！あなたの恋愛相談、いつでも聞くよ〜😊",
        "うれしい！あなたの恋愛がうまくいくといいね〜🌟",
        "こちらこそ！あなたの恋愛を応援してるよ〜💕",
        "どういたしまして〜！また何でも聞いてね〜😄",
        "いえいえ〜！あなたの恋愛、応援してるよ〜💪",
        "ありがとう〜！一緒に恋愛を楽しもう〜✨"
    ],
    "casual": [
        "そうなんだ〜！あなたの恋愛についてもっと詳しく教えて〜😊",
        "なるほど！あなたの恋愛観、とても興味深いね〜✨",
        "へー！恋愛についてこんな風に考えてるんだ〜💕",
        "面白い！あなたの恋愛の話、もっと聞きたいな〜🌟",
        "そうなんだ！恋愛について色々考えてるんだね〜😄",
        "へー！恋愛についてこんな風に感じてるんだ〜💖",
        "なるほど〜！あなたの恋愛観、とても素敵だね〜😊",
        "面白い！恋愛について色々考えてるんだね〜✨"
    ],
    "encouragement": [
        "大丈夫！あなたなら絶対にうまくいくよ〜💪✨",
        "頑張って！あなたの恋愛、応援してるよ〜💖",
        "きっと大丈夫！あなたの魅力、相手にも伝わるはず〜😊",
        "諦めないで！あなたの恋愛、必ず良い方向に進むよ〜🌟",
        "信じてる！あなたの恋愛、きっと素敵なものになるよ〜💕",
        "大丈夫！あなたの魅力、きっと伝わるよ〜😄",
        "頑張って！あなたなら絶対にできるよ〜💪",
        "きっと大丈夫！あなたの恋愛、応援してるよ〜✨"
    ],
    "advice_intro": [
        "よし！あなたの恋愛について、一緒に考えてみよう〜✨",
        "なるほど！あなたの恋愛の悩み、解決策を考えてみるね〜😊",
        "わかった！あなたの恋愛について、具体的なアドバイスをしてみるよ〜💕",
        "そうなんだ！あなたの恋愛について、一緒に考えてみよう〜🌟",
        "了解！あなたの恋愛について、詳しくアドバイスしてみるね〜😄",
        "よし！あなたの恋愛、一緒に解決していこう〜💖",
        "なるほど！あなたの恋愛について、詳しくアドバイスしてみるね〜😊",
        "わかった！あなたの恋愛、一緒に考えてみよう〜✨"
    ],
    "question_type_specific": {
        "方法論・アプローチ": [
            "よし！具体的な方法を一緒に考えてみよう〜💪",
            "なるほど！段階的なアプローチを提案してみるね〜✨",
            "わかった！実践的な方法を詳しく説明するよ〜😊"
        ],
        "原因分析・理由説明": [
            "そうなんだ！なぜそうなったのか、一緒に分析してみよう〜🤔",
            "なるほど！原因を深く考えてみるね〜💭",
            "わかった！背景を詳しく分析してみるよ〜✨"
        ],
        "タイミング・時期": [
            "そうなんだ！最適なタイミングを一緒に考えてみよう〜⏰",
            "なるほど！時期について詳しくアドバイスしてみるね〜📅",
            "わかった！タイミングのポイントを説明するよ〜✨"
        ],
        "場所・デートプラン": [
            "よし！素敵な場所やプランを一緒に考えてみよう〜🗺️",
            "なるほど！相手の好みに合わせた場所を提案してみるね〜💕",
            "わかった！具体的なデートプランを考えてみるよ〜✨"
        ],
        "具体的な内容・アイデア": [
            "よし！具体的なアイデアを一緒に考えてみよう〜💡",
            "なるほど！実践できるアイデアを提案してみるね〜✨",
            "わかった！すぐに実行できる内容を考えてみるよ〜😊"
        ],
        "感情・心理": [
            "そうなんだ！気持ちの面を一緒に考えてみよう〜💖",
            "なるほど！心理的な側面からサポートしてみるね〜🧠",
            "わかった！感情に寄り添ったアドバイスをしてみるよ〜✨"
        ],
        "LINE・メッセージ": [
            "よし！LINEの文例を一緒に考えてみよう〜📱",
            "なるほど！相手に響くメッセージを提案してみるね〜💬",
            "わかった！具体的な文例を考えてみるよ〜✨"
        ],
        "関係性・告白": [
            "そうなんだ！関係性について一緒に考えてみよう〜💕",
            "なるほど！告白について詳しくアドバイスしてみるね〜💖",
            "わかった！段階的なアプローチを考えてみるよ〜✨"
        ],
        "一般的な相談": [
            "よし！恋愛について一緒に考えてみよう〜💕",
            "なるほど！総合的なアドバイスをしてみるね〜✨",
            "わかった！様々な角度から考えてみるよ〜😊"
        ]
    }
}

# ランダムなレスポンスパターンを取得する関数
def get_random_response_pattern(pattern_type, user_profile, question_type=None):
    """指定されたタイプのランダムなレスポンスパターンを取得"""
    import random
    
    user_mbti = user_profile.get('mbti', '不明')
    nickname = MBTI_NICKNAME.get(user_mbti, "恋愛探検家")
    
    # 質問タイプ別のパターンがある場合は優先使用
    if question_type and pattern_type == "advice_intro":
        question_type_patterns = RESPONSE_PATTERNS.get("question_type_specific", {}).get(question_type, [])
        if question_type_patterns:
            return random.choice(question_type_patterns).format(nickname=nickname)
    
    patterns = RESPONSE_PATTERNS.get(pattern_type, [])
    if patterns:
        return random.choice(patterns).format(nickname=nickname)
    return f"こんにちは！{nickname}のあなた、何かお手伝いできることはありますか？😊"

if __name__ == '__main__':
    # 環境変数が設定されているか確認
    print("=== 環境変数チェック ===")
    required_env_vars = ["OPENAI_API_KEY", "STRIPE_SECRET_KEY", "STRIPE_PRICE_ID", "STRIPE_WEBHOOK_SECRET", "LINE_CHANNEL_ACCESS_TOKEN"]
    for var in required_env_vars:
        value = os.getenv(var)
        if not value:
            print(f"⚠️ 警告: 環境変数 {var} が設定されていません。関連機能が動作しない可能性があります。")
        else:
            print(f"✅ {var}: {'SET' if value else 'NOT SET'}")
    
    print(f"=== Stripe設定確認 ===")
    print(f"Stripe API Key: {'SET' if stripe.api_key else 'NOT SET'}")
    print(f"Stripe Price ID: {stripe_price_id}")
    print(f"GAS Notify URL: {os.getenv('GAS_NOTIFY_URL', 'NOT SET')}")
    print("========================")

    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000))) 